// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// Activate implements activate operation.
//
// Activates a custom hostname for a project.
//
// POST /v1/projects/{ref}/custom-hostname/activate
func (UnimplementedHandler) Activate(ctx context.Context, params ActivateParams) (r ActivateRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ActivateVanitySubdomainPlease implements activateVanitySubdomainPlease operation.
//
// Activates a vanity subdomain for a project.
//
// POST /v1/projects/{ref}/vanity-subdomain/activate
func (UnimplementedHandler) ActivateVanitySubdomainPlease(ctx context.Context, req *VanitySubdomainBody, params ActivateVanitySubdomainPleaseParams) (r ActivateVanitySubdomainPleaseRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ApplyNetworkRestrictions implements applyNetworkRestrictions operation.
//
// Updates project's network restrictions.
//
// POST /v1/projects/{ref}/network-restrictions/apply
func (UnimplementedHandler) ApplyNetworkRestrictions(ctx context.Context, req *NetworkRestrictionsRequest, params ApplyNetworkRestrictionsParams) (r ApplyNetworkRestrictionsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// Authorize implements authorize operation.
//
// Authorize user through oauth.
//
// GET /v1/oauth/authorize
func (UnimplementedHandler) Authorize(ctx context.Context, params AuthorizeParams) error {
	return ht.ErrNotImplemented
}

// CheckServiceHealth implements checkServiceHealth operation.
//
// Gets project's service health status.
//
// GET /v1/projects/{ref}/health
func (UnimplementedHandler) CheckServiceHealth(ctx context.Context, params CheckServiceHealthParams) (r CheckServiceHealthRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CheckVanitySubdomainAvailability implements checkVanitySubdomainAvailability operation.
//
// Checks vanity subdomain availability.
//
// POST /v1/projects/{ref}/vanity-subdomain/check-availability
func (UnimplementedHandler) CheckVanitySubdomainAvailability(ctx context.Context, req *VanitySubdomainBody, params CheckVanitySubdomainAvailabilityParams) (r CheckVanitySubdomainAvailabilityRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateBranch implements createBranch operation.
//
// Creates a database branch from the specified project.
//
// POST /v1/projects/{ref}/branches
func (UnimplementedHandler) CreateBranch(ctx context.Context, req *CreateBranchBody, params CreateBranchParams) (r CreateBranchRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateCustomHostnameConfig implements createCustomHostnameConfig operation.
//
// Updates project's custom hostname configuration.
//
// POST /v1/projects/{ref}/custom-hostname/initialize
func (UnimplementedHandler) CreateCustomHostnameConfig(ctx context.Context, req *UpdateCustomHostnameBody, params CreateCustomHostnameConfigParams) (r CreateCustomHostnameConfigRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateFunction implements createFunction operation.
//
// Creates a function and adds it to the specified project.
//
// POST /v1/projects/{ref}/functions
func (UnimplementedHandler) CreateFunction(ctx context.Context, req *V1CreateFunctionBody, params CreateFunctionParams) (r CreateFunctionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateOrganization implements createOrganization operation.
//
// Create an organization.
//
// POST /v1/organizations
func (UnimplementedHandler) CreateOrganization(ctx context.Context, req *CreateOrganizationBodyV1) (r CreateOrganizationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateProject implements createProject operation.
//
// Create a project.
//
// POST /v1/projects
func (UnimplementedHandler) CreateProject(ctx context.Context, req *V1CreateProjectBody) (r *V1ProjectResponse, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateProviderForProject implements createProviderForProject operation.
//
// Creates a new SSO provider.
//
// POST /v1/projects/{ref}/config/auth/sso/providers
func (UnimplementedHandler) CreateProviderForProject(ctx context.Context, req *CreateProviderBody, params CreateProviderForProjectParams) (r CreateProviderForProjectRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateSecrets implements createSecrets operation.
//
// Creates multiple secrets and adds them to the specified project.
//
// POST /v1/projects/{ref}/secrets
func (UnimplementedHandler) CreateSecrets(ctx context.Context, req []CreateSecretBody, params CreateSecretsParams) (r CreateSecretsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateTPAForProject implements createTPAForProject operation.
//
// Creates a new third-party auth integration.
//
// POST /v1/projects/{ref}/config/auth/third-party-auth
func (UnimplementedHandler) CreateTPAForProject(ctx context.Context, req *CreateThirdPartyAuthBody, params CreateTPAForProjectParams) (r CreateTPAForProjectRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteBranch implements deleteBranch operation.
//
// Deletes the specified database branch.
//
// DELETE /v1/branches/{branch_id}
func (UnimplementedHandler) DeleteBranch(ctx context.Context, params DeleteBranchParams) (r DeleteBranchRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteFunction implements deleteFunction operation.
//
// Deletes a function with the specified slug from the specified project.
//
// DELETE /v1/projects/{ref}/functions/{function_slug}
func (UnimplementedHandler) DeleteFunction(ctx context.Context, params DeleteFunctionParams) (r DeleteFunctionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteProject implements deleteProject operation.
//
// Deletes the given project.
//
// DELETE /v1/projects/{ref}
func (UnimplementedHandler) DeleteProject(ctx context.Context, params DeleteProjectParams) (r DeleteProjectRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteSecrets implements deleteSecrets operation.
//
// Deletes all secrets with the given names from the specified project.
//
// DELETE /v1/projects/{ref}/secrets
func (UnimplementedHandler) DeleteSecrets(ctx context.Context, req []string, params DeleteSecretsParams) (r DeleteSecretsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteTPAForProject implements deleteTPAForProject operation.
//
// Removes a third-party auth integration.
//
// DELETE /v1/projects/{ref}/config/auth/third-party-auth/{tpa_id}
func (UnimplementedHandler) DeleteTPAForProject(ctx context.Context, params DeleteTPAForProjectParams) (r DeleteTPAForProjectRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DisableBranch implements disableBranch operation.
//
// Disables preview branching for the specified project.
//
// DELETE /v1/projects/{ref}/branches
func (UnimplementedHandler) DisableBranch(ctx context.Context, params DisableBranchParams) (r DisableBranchRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetBackups implements getBackups operation.
//
// Lists all backups.
//
// GET /v1/projects/{ref}/database/backups
func (UnimplementedHandler) GetBackups(ctx context.Context, params GetBackupsParams) (r GetBackupsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetBranchDetails implements getBranchDetails operation.
//
// Fetches configurations of the specified database branch.
//
// GET /v1/branches/{branch_id}
func (UnimplementedHandler) GetBranchDetails(ctx context.Context, params GetBranchDetailsParams) (r GetBranchDetailsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetBranches implements getBranches operation.
//
// Returns all database branches of the specified project.
//
// GET /v1/projects/{ref}/branches
func (UnimplementedHandler) GetBranches(ctx context.Context, params GetBranchesParams) (r GetBranchesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetBuckets implements getBuckets operation.
//
// Lists all buckets.
//
// GET /v1/projects/{ref}/storage/buckets
func (UnimplementedHandler) GetBuckets(ctx context.Context, params GetBucketsParams) (r GetBucketsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetConfig implements getConfig operation.
//
// Gets project's Postgres config.
//
// GET /v1/projects/{ref}/config/database/postgres
func (UnimplementedHandler) GetConfig(ctx context.Context, params GetConfigParams) (r GetConfigRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCustomHostnameConfig implements getCustomHostnameConfig operation.
//
// Gets project's custom hostname config.
//
// GET /v1/projects/{ref}/custom-hostname
func (UnimplementedHandler) GetCustomHostnameConfig(ctx context.Context, params GetCustomHostnameConfigParams) (r GetCustomHostnameConfigRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetFunction implements getFunction operation.
//
// Retrieves a function with the specified slug and project.
//
// GET /v1/projects/{ref}/functions/{function_slug}
func (UnimplementedHandler) GetFunction(ctx context.Context, params GetFunctionParams) (r GetFunctionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetFunctionBody implements getFunctionBody operation.
//
// Retrieves a function body for the specified slug and project.
//
// GET /v1/projects/{ref}/functions/{function_slug}/body
func (UnimplementedHandler) GetFunctionBody(ctx context.Context, params GetFunctionBodyParams) (r GetFunctionBodyRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetFunctions implements getFunctions operation.
//
// Returns all functions you've previously added to the specified project.
//
// GET /v1/projects/{ref}/functions
func (UnimplementedHandler) GetFunctions(ctx context.Context, params GetFunctionsParams) (r GetFunctionsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetNetworkBans implements getNetworkBans operation.
//
// Gets project's network bans.
//
// POST /v1/projects/{ref}/network-bans/retrieve
func (UnimplementedHandler) GetNetworkBans(ctx context.Context, params GetNetworkBansParams) (r GetNetworkBansRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetNetworkRestrictions implements getNetworkRestrictions operation.
//
// Gets project's network restrictions.
//
// GET /v1/projects/{ref}/network-restrictions
func (UnimplementedHandler) GetNetworkRestrictions(ctx context.Context, params GetNetworkRestrictionsParams) (r GetNetworkRestrictionsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetOrganization implements getOrganization operation.
//
// Gets information about the organization.
//
// GET /v1/organizations/{slug}
func (UnimplementedHandler) GetOrganization(ctx context.Context, params GetOrganizationParams) (r *V1OrganizationSlugResponse, _ error) {
	return r, ht.ErrNotImplemented
}

// GetOrganizations implements getOrganizations operation.
//
// Returns a list of organizations that you currently belong to.
//
// GET /v1/organizations
func (UnimplementedHandler) GetOrganizations(ctx context.Context) (r GetOrganizationsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetPgsodiumConfig implements getPgsodiumConfig operation.
//
// Gets project's pgsodium config.
//
// GET /v1/projects/{ref}/pgsodium
func (UnimplementedHandler) GetPgsodiumConfig(ctx context.Context, params GetPgsodiumConfigParams) (r GetPgsodiumConfigRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetPostgRESTConfig implements getPostgRESTConfig operation.
//
// Gets project's postgrest config.
//
// GET /v1/projects/{ref}/postgrest
func (UnimplementedHandler) GetPostgRESTConfig(ctx context.Context, params GetPostgRESTConfigParams) (r GetPostgRESTConfigRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetProjectApiKeys implements getProjectApiKeys operation.
//
// Get project api keys.
//
// GET /v1/projects/{ref}/api-keys
func (UnimplementedHandler) GetProjectApiKeys(ctx context.Context, params GetProjectApiKeysParams) (r GetProjectApiKeysRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetProjects implements getProjects operation.
//
// Returns a list of all projects you've previously created.
//
// GET /v1/projects
func (UnimplementedHandler) GetProjects(ctx context.Context) (r []V1ProjectResponse, _ error) {
	return r, ht.ErrNotImplemented
}

// GetProviderById implements getProviderById operation.
//
// Gets a SSO provider by its UUID.
//
// GET /v1/projects/{ref}/config/auth/sso/providers/{provider_id}
func (UnimplementedHandler) GetProviderById(ctx context.Context, params GetProviderByIdParams) (r GetProviderByIdRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetReadOnlyModeStatus implements getReadOnlyModeStatus operation.
//
// Returns project's readonly mode status.
//
// GET /v1/projects/{ref}/readonly
func (UnimplementedHandler) GetReadOnlyModeStatus(ctx context.Context, params GetReadOnlyModeStatusParams) (r GetReadOnlyModeStatusRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSecrets implements getSecrets operation.
//
// Returns all secrets you've previously added to the specified project.
//
// GET /v1/projects/{ref}/secrets
func (UnimplementedHandler) GetSecrets(ctx context.Context, params GetSecretsParams) (r GetSecretsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSnippet implements getSnippet operation.
//
// Gets a specific SQL snippet.
//
// GET /v1/snippets/{id}
func (UnimplementedHandler) GetSnippet(ctx context.Context, params GetSnippetParams) (r GetSnippetRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSslEnforcementConfig implements getSslEnforcementConfig operation.
//
// Get project's SSL enforcement configuration.
//
// GET /v1/projects/{ref}/ssl-enforcement
func (UnimplementedHandler) GetSslEnforcementConfig(ctx context.Context, params GetSslEnforcementConfigParams) (r GetSslEnforcementConfigRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTPAForProject implements getTPAForProject operation.
//
// Get a third-party integration.
//
// GET /v1/projects/{ref}/config/auth/third-party-auth/{tpa_id}
func (UnimplementedHandler) GetTPAForProject(ctx context.Context, params GetTPAForProjectParams) (r GetTPAForProjectRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetTypescriptTypes implements getTypescriptTypes operation.
//
// Returns the TypeScript types of your schema for use with supabase-js.
//
// GET /v1/projects/{ref}/types/typescript
func (UnimplementedHandler) GetTypescriptTypes(ctx context.Context, params GetTypescriptTypesParams) (r GetTypescriptTypesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetUpgradeStatus implements getUpgradeStatus operation.
//
// Gets the latest status of the project's upgrade.
//
// GET /v1/projects/{ref}/upgrade/status
func (UnimplementedHandler) GetUpgradeStatus(ctx context.Context, params GetUpgradeStatusParams) (r GetUpgradeStatusRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetV1AuthConfig implements getV1AuthConfig operation.
//
// Gets project's auth config.
//
// GET /v1/projects/{ref}/config/auth
func (UnimplementedHandler) GetV1AuthConfig(ctx context.Context, params GetV1AuthConfigParams) (r GetV1AuthConfigRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetVanitySubdomainConfig implements getVanitySubdomainConfig operation.
//
// Gets current vanity subdomain config.
//
// GET /v1/projects/{ref}/vanity-subdomain
func (UnimplementedHandler) GetVanitySubdomainConfig(ctx context.Context, params GetVanitySubdomainConfigParams) (r GetVanitySubdomainConfigRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListAllProviders implements listAllProviders operation.
//
// Lists all SSO providers.
//
// GET /v1/projects/{ref}/config/auth/sso/providers
func (UnimplementedHandler) ListAllProviders(ctx context.Context, params ListAllProvidersParams) (r ListAllProvidersRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListSnippets implements listSnippets operation.
//
// Lists SQL snippets for the logged in user.
//
// GET /v1/snippets
func (UnimplementedHandler) ListSnippets(ctx context.Context, params ListSnippetsParams) (r ListSnippetsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ListTPAForProject implements listTPAForProject operation.
//
// Lists all third-party auth integrations.
//
// GET /v1/projects/{ref}/config/auth/third-party-auth
func (UnimplementedHandler) ListTPAForProject(ctx context.Context, params ListTPAForProjectParams) (r ListTPAForProjectRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RemoveCustomHostnameConfig implements removeCustomHostnameConfig operation.
//
// Deletes a project's custom hostname configuration.
//
// DELETE /v1/projects/{ref}/custom-hostname
func (UnimplementedHandler) RemoveCustomHostnameConfig(ctx context.Context, params RemoveCustomHostnameConfigParams) (r RemoveCustomHostnameConfigRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RemoveNetworkBan implements removeNetworkBan operation.
//
// Remove network bans.
//
// DELETE /v1/projects/{ref}/network-bans
func (UnimplementedHandler) RemoveNetworkBan(ctx context.Context, req *RemoveNetworkBanRequest, params RemoveNetworkBanParams) (r RemoveNetworkBanRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RemoveProviderById implements removeProviderById operation.
//
// Removes a SSO provider by its UUID.
//
// DELETE /v1/projects/{ref}/config/auth/sso/providers/{provider_id}
func (UnimplementedHandler) RemoveProviderById(ctx context.Context, params RemoveProviderByIdParams) (r RemoveProviderByIdRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RemoveReadReplica implements removeReadReplica operation.
//
// Remove a read replica.
//
// POST /v1/projects/{ref}/read-replicas/remove
func (UnimplementedHandler) RemoveReadReplica(ctx context.Context, req *RemoveReadReplicaBody, params RemoveReadReplicaParams) (r RemoveReadReplicaRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RemoveVanitySubdomainConfig implements removeVanitySubdomainConfig operation.
//
// Deletes a project's vanity subdomain configuration.
//
// DELETE /v1/projects/{ref}/vanity-subdomain
func (UnimplementedHandler) RemoveVanitySubdomainConfig(ctx context.Context, params RemoveVanitySubdomainConfigParams) (r RemoveVanitySubdomainConfigRes, _ error) {
	return r, ht.ErrNotImplemented
}

// ResetBranch implements resetBranch operation.
//
// Resets the specified database branch.
//
// POST /v1/branches/{branch_id}/reset
func (UnimplementedHandler) ResetBranch(ctx context.Context, params ResetBranchParams) (r ResetBranchRes, _ error) {
	return r, ht.ErrNotImplemented
}

// Reverify implements reverify operation.
//
// Attempts to verify the DNS configuration for project's custom hostname configuration.
//
// POST /v1/projects/{ref}/custom-hostname/reverify
func (UnimplementedHandler) Reverify(ctx context.Context, params ReverifyParams) (r ReverifyRes, _ error) {
	return r, ht.ErrNotImplemented
}

// SetUpReadReplica implements setUpReadReplica operation.
//
// Set up a read replica.
//
// POST /v1/projects/{ref}/read-replicas/setup
func (UnimplementedHandler) SetUpReadReplica(ctx context.Context, req *SetUpReadReplicaBody, params SetUpReadReplicaParams) (r SetUpReadReplicaRes, _ error) {
	return r, ht.ErrNotImplemented
}

// TemporarilyDisableReadonlyMode implements temporarilyDisableReadonlyMode operation.
//
// Disables project's readonly mode for the next 15 minutes.
//
// POST /v1/projects/{ref}/readonly/temporary-disable
func (UnimplementedHandler) TemporarilyDisableReadonlyMode(ctx context.Context, params TemporarilyDisableReadonlyModeParams) (r TemporarilyDisableReadonlyModeRes, _ error) {
	return r, ht.ErrNotImplemented
}

// Token implements token operation.
//
// Exchange auth code for user's access and refresh token.
//
// POST /v1/oauth/token
func (UnimplementedHandler) Token(ctx context.Context, req *OAuthTokenBody) (r *OAuthTokenResponse, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateBranch implements updateBranch operation.
//
// Updates the configuration of the specified database branch.
//
// PATCH /v1/branches/{branch_id}
func (UnimplementedHandler) UpdateBranch(ctx context.Context, req *UpdateBranchBody, params UpdateBranchParams) (r UpdateBranchRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateConfig implements updateConfig operation.
//
// Updates project's Postgres config.
//
// PUT /v1/projects/{ref}/config/database/postgres
func (UnimplementedHandler) UpdateConfig(ctx context.Context, req *UpdatePostgresConfigBody, params UpdateConfigParams) (r UpdateConfigRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateFunction implements updateFunction operation.
//
// Updates a function with the specified slug and project.
//
// PATCH /v1/projects/{ref}/functions/{function_slug}
func (UnimplementedHandler) UpdateFunction(ctx context.Context, req *V1UpdateFunctionBody, params UpdateFunctionParams) (r UpdateFunctionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdatePgsodiumConfig implements updatePgsodiumConfig operation.
//
// Updates project's pgsodium config. Updating the root_key can cause all data encrypted with the
// older key to become inaccessible.
//
// PUT /v1/projects/{ref}/pgsodium
func (UnimplementedHandler) UpdatePgsodiumConfig(ctx context.Context, req *UpdatePgsodiumConfigBody, params UpdatePgsodiumConfigParams) (r UpdatePgsodiumConfigRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdatePostgRESTConfig implements updatePostgRESTConfig operation.
//
// Updates project's postgrest config.
//
// PATCH /v1/projects/{ref}/postgrest
func (UnimplementedHandler) UpdatePostgRESTConfig(ctx context.Context, req *UpdatePostgrestConfigBody, params UpdatePostgRESTConfigParams) (r UpdatePostgRESTConfigRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateProviderById implements updateProviderById operation.
//
// Updates a SSO provider by its UUID.
//
// PUT /v1/projects/{ref}/config/auth/sso/providers/{provider_id}
func (UnimplementedHandler) UpdateProviderById(ctx context.Context, req *UpdateProviderBody, params UpdateProviderByIdParams) (r UpdateProviderByIdRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateSslEnforcementConfig implements updateSslEnforcementConfig operation.
//
// Update project's SSL enforcement configuration.
//
// PUT /v1/projects/{ref}/ssl-enforcement
func (UnimplementedHandler) UpdateSslEnforcementConfig(ctx context.Context, req *SslEnforcementRequest, params UpdateSslEnforcementConfigParams) (r UpdateSslEnforcementConfigRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateV1AuthConfig implements updateV1AuthConfig operation.
//
// Updates a project's auth config.
//
// PATCH /v1/projects/{ref}/config/auth
func (UnimplementedHandler) UpdateV1AuthConfig(ctx context.Context, req *UpdateAuthConfigBody, params UpdateV1AuthConfigParams) (r UpdateV1AuthConfigRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpgradeEligibilityInformation implements upgradeEligibilityInformation operation.
//
// Returns the project's eligibility for upgrades.
//
// GET /v1/projects/{ref}/upgrade/eligibility
func (UnimplementedHandler) UpgradeEligibilityInformation(ctx context.Context, params UpgradeEligibilityInformationParams) (r UpgradeEligibilityInformationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpgradeProject implements upgradeProject operation.
//
// Upgrades the project's Postgres version.
//
// POST /v1/projects/{ref}/upgrade
func (UnimplementedHandler) UpgradeProject(ctx context.Context, req *UpgradeDatabaseBody, params UpgradeProjectParams) (r UpgradeProjectRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1EnableDatabaseWebhooks implements v1EnableDatabaseWebhooks operation.
//
// Enables Database Webhooks on the project.
//
// POST /v1/projects/{ref}/database/webhooks/enable
func (UnimplementedHandler) V1EnableDatabaseWebhooks(ctx context.Context, params V1EnableDatabaseWebhooksParams) (r V1EnableDatabaseWebhooksRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1GetPgbouncerConfig implements v1GetPgbouncerConfig operation.
//
// Get project's pgbouncer config.
//
// GET /v1/projects/{ref}/config/database/pgbouncer
func (UnimplementedHandler) V1GetPgbouncerConfig(ctx context.Context, params V1GetPgbouncerConfigParams) (r V1GetPgbouncerConfigRes, _ error) {
	return r, ht.ErrNotImplemented
}

// V1ListOrganizationMembers implements v1ListOrganizationMembers operation.
//
// List members of an organization.
//
// GET /v1/organizations/{slug}/members
func (UnimplementedHandler) V1ListOrganizationMembers(ctx context.Context, params V1ListOrganizationMembersParams) (r []V1OrganizationMemberResponse, _ error) {
	return r, ht.ErrNotImplemented
}

// V1RestorePitr implements v1RestorePitr operation.
//
// Restores a PITR backup for a database.
//
// POST /v1/projects/{ref}/database/backups/restore-pitr
func (UnimplementedHandler) V1RestorePitr(ctx context.Context, req *V1RestorePitrBody, params V1RestorePitrParams) error {
	return ht.ErrNotImplemented
}

// V1RunQuery implements v1RunQuery operation.
//
// Run sql query.
//
// POST /v1/projects/{ref}/database/query
func (UnimplementedHandler) V1RunQuery(ctx context.Context, req *V1RunQueryBody, params V1RunQueryParams) (r V1RunQueryRes, _ error) {
	return r, ht.ErrNotImplemented
}
