// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"tribemedia.io/m/ent/customhostname"
	"tribemedia.io/m/ent/predicate"
)

// CustomHostnameDelete is the builder for deleting a CustomHostname entity.
type CustomHostnameDelete struct {
	config
	hooks    []Hook
	mutation *CustomHostnameMutation
}

// Where appends a list predicates to the CustomHostnameDelete builder.
func (chd *CustomHostnameDelete) Where(ps ...predicate.CustomHostname) *CustomHostnameDelete {
	chd.mutation.Where(ps...)
	return chd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (chd *CustomHostnameDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, chd.sqlExec, chd.mutation, chd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (chd *CustomHostnameDelete) ExecX(ctx context.Context) int {
	n, err := chd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (chd *CustomHostnameDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(customhostname.Table, sqlgraph.NewFieldSpec(customhostname.FieldID, field.TypeUUID))
	if ps := chd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, chd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	chd.mutation.done = true
	return affected, err
}

// CustomHostnameDeleteOne is the builder for deleting a single CustomHostname entity.
type CustomHostnameDeleteOne struct {
	chd *CustomHostnameDelete
}

// Where appends a list predicates to the CustomHostnameDelete builder.
func (chdo *CustomHostnameDeleteOne) Where(ps ...predicate.CustomHostname) *CustomHostnameDeleteOne {
	chdo.chd.mutation.Where(ps...)
	return chdo
}

// Exec executes the deletion query.
func (chdo *CustomHostnameDeleteOne) Exec(ctx context.Context) error {
	n, err := chdo.chd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{customhostname.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (chdo *CustomHostnameDeleteOne) ExecX(ctx context.Context) {
	if err := chdo.Exec(ctx); err != nil {
		panic(err)
	}
}
