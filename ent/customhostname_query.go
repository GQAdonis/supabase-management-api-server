// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"tribemedia.io/m/ent/customhostname"
	"tribemedia.io/m/ent/predicate"
	"tribemedia.io/m/ent/project"
)

// CustomHostnameQuery is the builder for querying CustomHostname entities.
type CustomHostnameQuery struct {
	config
	ctx         *QueryContext
	order       []customhostname.OrderOption
	inters      []Interceptor
	predicates  []predicate.CustomHostname
	withProject *ProjectQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CustomHostnameQuery builder.
func (chq *CustomHostnameQuery) Where(ps ...predicate.CustomHostname) *CustomHostnameQuery {
	chq.predicates = append(chq.predicates, ps...)
	return chq
}

// Limit the number of records to be returned by this query.
func (chq *CustomHostnameQuery) Limit(limit int) *CustomHostnameQuery {
	chq.ctx.Limit = &limit
	return chq
}

// Offset to start from.
func (chq *CustomHostnameQuery) Offset(offset int) *CustomHostnameQuery {
	chq.ctx.Offset = &offset
	return chq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (chq *CustomHostnameQuery) Unique(unique bool) *CustomHostnameQuery {
	chq.ctx.Unique = &unique
	return chq
}

// Order specifies how the records should be ordered.
func (chq *CustomHostnameQuery) Order(o ...customhostname.OrderOption) *CustomHostnameQuery {
	chq.order = append(chq.order, o...)
	return chq
}

// QueryProject chains the current query on the "project" edge.
func (chq *CustomHostnameQuery) QueryProject() *ProjectQuery {
	query := (&ProjectClient{config: chq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := chq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := chq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(customhostname.Table, customhostname.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, customhostname.ProjectTable, customhostname.ProjectColumn),
		)
		fromU = sqlgraph.SetNeighbors(chq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CustomHostname entity from the query.
// Returns a *NotFoundError when no CustomHostname was found.
func (chq *CustomHostnameQuery) First(ctx context.Context) (*CustomHostname, error) {
	nodes, err := chq.Limit(1).All(setContextOp(ctx, chq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{customhostname.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (chq *CustomHostnameQuery) FirstX(ctx context.Context) *CustomHostname {
	node, err := chq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CustomHostname ID from the query.
// Returns a *NotFoundError when no CustomHostname ID was found.
func (chq *CustomHostnameQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = chq.Limit(1).IDs(setContextOp(ctx, chq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{customhostname.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (chq *CustomHostnameQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := chq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CustomHostname entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CustomHostname entity is found.
// Returns a *NotFoundError when no CustomHostname entities are found.
func (chq *CustomHostnameQuery) Only(ctx context.Context) (*CustomHostname, error) {
	nodes, err := chq.Limit(2).All(setContextOp(ctx, chq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{customhostname.Label}
	default:
		return nil, &NotSingularError{customhostname.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (chq *CustomHostnameQuery) OnlyX(ctx context.Context) *CustomHostname {
	node, err := chq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CustomHostname ID in the query.
// Returns a *NotSingularError when more than one CustomHostname ID is found.
// Returns a *NotFoundError when no entities are found.
func (chq *CustomHostnameQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = chq.Limit(2).IDs(setContextOp(ctx, chq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{customhostname.Label}
	default:
		err = &NotSingularError{customhostname.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (chq *CustomHostnameQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := chq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CustomHostnames.
func (chq *CustomHostnameQuery) All(ctx context.Context) ([]*CustomHostname, error) {
	ctx = setContextOp(ctx, chq.ctx, "All")
	if err := chq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CustomHostname, *CustomHostnameQuery]()
	return withInterceptors[[]*CustomHostname](ctx, chq, qr, chq.inters)
}

// AllX is like All, but panics if an error occurs.
func (chq *CustomHostnameQuery) AllX(ctx context.Context) []*CustomHostname {
	nodes, err := chq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CustomHostname IDs.
func (chq *CustomHostnameQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if chq.ctx.Unique == nil && chq.path != nil {
		chq.Unique(true)
	}
	ctx = setContextOp(ctx, chq.ctx, "IDs")
	if err = chq.Select(customhostname.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (chq *CustomHostnameQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := chq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (chq *CustomHostnameQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, chq.ctx, "Count")
	if err := chq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, chq, querierCount[*CustomHostnameQuery](), chq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (chq *CustomHostnameQuery) CountX(ctx context.Context) int {
	count, err := chq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (chq *CustomHostnameQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, chq.ctx, "Exist")
	switch _, err := chq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (chq *CustomHostnameQuery) ExistX(ctx context.Context) bool {
	exist, err := chq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CustomHostnameQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (chq *CustomHostnameQuery) Clone() *CustomHostnameQuery {
	if chq == nil {
		return nil
	}
	return &CustomHostnameQuery{
		config:      chq.config,
		ctx:         chq.ctx.Clone(),
		order:       append([]customhostname.OrderOption{}, chq.order...),
		inters:      append([]Interceptor{}, chq.inters...),
		predicates:  append([]predicate.CustomHostname{}, chq.predicates...),
		withProject: chq.withProject.Clone(),
		// clone intermediate query.
		sql:  chq.sql.Clone(),
		path: chq.path,
	}
}

// WithProject tells the query-builder to eager-load the nodes that are connected to
// the "project" edge. The optional arguments are used to configure the query builder of the edge.
func (chq *CustomHostnameQuery) WithProject(opts ...func(*ProjectQuery)) *CustomHostnameQuery {
	query := (&ProjectClient{config: chq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	chq.withProject = query
	return chq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ProjectID uuid.UUID `json:"project_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CustomHostname.Query().
//		GroupBy(customhostname.FieldProjectID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (chq *CustomHostnameQuery) GroupBy(field string, fields ...string) *CustomHostnameGroupBy {
	chq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CustomHostnameGroupBy{build: chq}
	grbuild.flds = &chq.ctx.Fields
	grbuild.label = customhostname.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ProjectID uuid.UUID `json:"project_id,omitempty"`
//	}
//
//	client.CustomHostname.Query().
//		Select(customhostname.FieldProjectID).
//		Scan(ctx, &v)
func (chq *CustomHostnameQuery) Select(fields ...string) *CustomHostnameSelect {
	chq.ctx.Fields = append(chq.ctx.Fields, fields...)
	sbuild := &CustomHostnameSelect{CustomHostnameQuery: chq}
	sbuild.label = customhostname.Label
	sbuild.flds, sbuild.scan = &chq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CustomHostnameSelect configured with the given aggregations.
func (chq *CustomHostnameQuery) Aggregate(fns ...AggregateFunc) *CustomHostnameSelect {
	return chq.Select().Aggregate(fns...)
}

func (chq *CustomHostnameQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range chq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, chq); err != nil {
				return err
			}
		}
	}
	for _, f := range chq.ctx.Fields {
		if !customhostname.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if chq.path != nil {
		prev, err := chq.path(ctx)
		if err != nil {
			return err
		}
		chq.sql = prev
	}
	return nil
}

func (chq *CustomHostnameQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CustomHostname, error) {
	var (
		nodes       = []*CustomHostname{}
		_spec       = chq.querySpec()
		loadedTypes = [1]bool{
			chq.withProject != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CustomHostname).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CustomHostname{config: chq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, chq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := chq.withProject; query != nil {
		if err := chq.loadProject(ctx, query, nodes, nil,
			func(n *CustomHostname, e *Project) { n.Edges.Project = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (chq *CustomHostnameQuery) loadProject(ctx context.Context, query *ProjectQuery, nodes []*CustomHostname, init func(*CustomHostname), assign func(*CustomHostname, *Project)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*CustomHostname)
	for i := range nodes {
		fk := nodes[i].ProjectID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(project.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "project_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (chq *CustomHostnameQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := chq.querySpec()
	_spec.Node.Columns = chq.ctx.Fields
	if len(chq.ctx.Fields) > 0 {
		_spec.Unique = chq.ctx.Unique != nil && *chq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, chq.driver, _spec)
}

func (chq *CustomHostnameQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(customhostname.Table, customhostname.Columns, sqlgraph.NewFieldSpec(customhostname.FieldID, field.TypeUUID))
	_spec.From = chq.sql
	if unique := chq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if chq.path != nil {
		_spec.Unique = true
	}
	if fields := chq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customhostname.FieldID)
		for i := range fields {
			if fields[i] != customhostname.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if chq.withProject != nil {
			_spec.Node.AddColumnOnce(customhostname.FieldProjectID)
		}
	}
	if ps := chq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := chq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := chq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := chq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (chq *CustomHostnameQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(chq.driver.Dialect())
	t1 := builder.Table(customhostname.Table)
	columns := chq.ctx.Fields
	if len(columns) == 0 {
		columns = customhostname.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if chq.sql != nil {
		selector = chq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if chq.ctx.Unique != nil && *chq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range chq.predicates {
		p(selector)
	}
	for _, p := range chq.order {
		p(selector)
	}
	if offset := chq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := chq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// CustomHostnameGroupBy is the group-by builder for CustomHostname entities.
type CustomHostnameGroupBy struct {
	selector
	build *CustomHostnameQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (chgb *CustomHostnameGroupBy) Aggregate(fns ...AggregateFunc) *CustomHostnameGroupBy {
	chgb.fns = append(chgb.fns, fns...)
	return chgb
}

// Scan applies the selector query and scans the result into the given value.
func (chgb *CustomHostnameGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, chgb.build.ctx, "GroupBy")
	if err := chgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CustomHostnameQuery, *CustomHostnameGroupBy](ctx, chgb.build, chgb, chgb.build.inters, v)
}

func (chgb *CustomHostnameGroupBy) sqlScan(ctx context.Context, root *CustomHostnameQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(chgb.fns))
	for _, fn := range chgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*chgb.flds)+len(chgb.fns))
		for _, f := range *chgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*chgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := chgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CustomHostnameSelect is the builder for selecting fields of CustomHostname entities.
type CustomHostnameSelect struct {
	*CustomHostnameQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (chs *CustomHostnameSelect) Aggregate(fns ...AggregateFunc) *CustomHostnameSelect {
	chs.fns = append(chs.fns, fns...)
	return chs
}

// Scan applies the selector query and scans the result into the given value.
func (chs *CustomHostnameSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, chs.ctx, "Select")
	if err := chs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CustomHostnameQuery, *CustomHostnameSelect](ctx, chs.CustomHostnameQuery, chs, chs.inters, v)
}

func (chs *CustomHostnameSelect) sqlScan(ctx context.Context, root *CustomHostnameQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(chs.fns))
	for _, fn := range chs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*chs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := chs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
