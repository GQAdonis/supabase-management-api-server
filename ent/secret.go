// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"tribemedia.io/m/ent/project"
	"tribemedia.io/m/ent/secret"
)

// Secret is the model entity for the Secret schema.
type Secret struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// The ID of the project this secret belongs to
	ProjectID uuid.UUID `json:"project_id,omitempty"`
	// The name of the secret
	Name string `json:"name,omitempty"`
	// The value of the secret
	Value string `json:"-"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SecretQuery when eager-loading is set.
	Edges        SecretEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SecretEdges holds the relations/edges for other nodes in the graph.
type SecretEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SecretEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Secret) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case secret.FieldName, secret.FieldValue:
			values[i] = new(sql.NullString)
		case secret.FieldID, secret.FieldProjectID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Secret fields.
func (s *Secret) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case secret.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case secret.FieldProjectID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value != nil {
				s.ProjectID = *value
			}
		case secret.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case secret.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				s.Value = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the Secret.
// This includes values selected through modifiers, order, etc.
func (s *Secret) GetValue(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the Secret entity.
func (s *Secret) QueryProject() *ProjectQuery {
	return NewSecretClient(s.config).QueryProject(s)
}

// Update returns a builder for updating this Secret.
// Note that you need to call Secret.Unwrap() before calling this method if this Secret
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Secret) Update() *SecretUpdateOne {
	return NewSecretClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Secret entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Secret) Unwrap() *Secret {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Secret is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Secret) String() string {
	var builder strings.Builder
	builder.WriteString("Secret(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("project_id=")
	builder.WriteString(fmt.Sprintf("%v", s.ProjectID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("value=<sensitive>")
	builder.WriteByte(')')
	return builder.String()
}

// Secrets is a parsable slice of Secret.
type Secrets []*Secret
