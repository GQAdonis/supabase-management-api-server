// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"tribemedia.io/m/ent/authconfig"
	"tribemedia.io/m/ent/branch"
	"tribemedia.io/m/ent/customhostname"
	"tribemedia.io/m/ent/function"
	"tribemedia.io/m/ent/networkban"
	"tribemedia.io/m/ent/pgsodiumconfig"
	"tribemedia.io/m/ent/predicate"
	"tribemedia.io/m/ent/project"
	"tribemedia.io/m/ent/secret"
	"tribemedia.io/m/ent/typescripttype"
)

// ProjectQuery is the builder for querying Project entities.
type ProjectQuery struct {
	config
	ctx                 *QueryContext
	order               []project.OrderOption
	inters              []Interceptor
	predicates          []predicate.Project
	withSecrets         *SecretQuery
	withTypescriptTypes *TypeScriptTypeQuery
	withFunctions       *FunctionQuery
	withCustomHostnames *CustomHostnameQuery
	withPgsodiumConfigs *PgsodiumConfigQuery
	withNetworkBans     *NetworkBanQuery
	withBranches        *BranchQuery
	withChildBranches   *BranchQuery
	withAuthConfig      *AuthConfigQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProjectQuery builder.
func (pq *ProjectQuery) Where(ps ...predicate.Project) *ProjectQuery {
	pq.predicates = append(pq.predicates, ps...)
	return pq
}

// Limit the number of records to be returned by this query.
func (pq *ProjectQuery) Limit(limit int) *ProjectQuery {
	pq.ctx.Limit = &limit
	return pq
}

// Offset to start from.
func (pq *ProjectQuery) Offset(offset int) *ProjectQuery {
	pq.ctx.Offset = &offset
	return pq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pq *ProjectQuery) Unique(unique bool) *ProjectQuery {
	pq.ctx.Unique = &unique
	return pq
}

// Order specifies how the records should be ordered.
func (pq *ProjectQuery) Order(o ...project.OrderOption) *ProjectQuery {
	pq.order = append(pq.order, o...)
	return pq
}

// QuerySecrets chains the current query on the "secrets" edge.
func (pq *ProjectQuery) QuerySecrets() *SecretQuery {
	query := (&SecretClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(secret.Table, secret.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.SecretsTable, project.SecretsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTypescriptTypes chains the current query on the "typescriptTypes" edge.
func (pq *ProjectQuery) QueryTypescriptTypes() *TypeScriptTypeQuery {
	query := (&TypeScriptTypeClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(typescripttype.Table, typescripttype.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.TypescriptTypesTable, project.TypescriptTypesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFunctions chains the current query on the "functions" edge.
func (pq *ProjectQuery) QueryFunctions() *FunctionQuery {
	query := (&FunctionClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(function.Table, function.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.FunctionsTable, project.FunctionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCustomHostnames chains the current query on the "customHostnames" edge.
func (pq *ProjectQuery) QueryCustomHostnames() *CustomHostnameQuery {
	query := (&CustomHostnameClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(customhostname.Table, customhostname.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.CustomHostnamesTable, project.CustomHostnamesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPgsodiumConfigs chains the current query on the "pgsodiumConfigs" edge.
func (pq *ProjectQuery) QueryPgsodiumConfigs() *PgsodiumConfigQuery {
	query := (&PgsodiumConfigClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(pgsodiumconfig.Table, pgsodiumconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.PgsodiumConfigsTable, project.PgsodiumConfigsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNetworkBans chains the current query on the "networkBans" edge.
func (pq *ProjectQuery) QueryNetworkBans() *NetworkBanQuery {
	query := (&NetworkBanClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(networkban.Table, networkban.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.NetworkBansTable, project.NetworkBansColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBranches chains the current query on the "branches" edge.
func (pq *ProjectQuery) QueryBranches() *BranchQuery {
	query := (&BranchClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(branch.Table, branch.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.BranchesTable, project.BranchesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildBranches chains the current query on the "childBranches" edge.
func (pq *ProjectQuery) QueryChildBranches() *BranchQuery {
	query := (&BranchClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(branch.Table, branch.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.ChildBranchesTable, project.ChildBranchesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAuthConfig chains the current query on the "auth_config" edge.
func (pq *ProjectQuery) QueryAuthConfig() *AuthConfigQuery {
	query := (&AuthConfigClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, selector),
			sqlgraph.To(authconfig.Table, authconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, project.AuthConfigTable, project.AuthConfigColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Project entity from the query.
// Returns a *NotFoundError when no Project was found.
func (pq *ProjectQuery) First(ctx context.Context) (*Project, error) {
	nodes, err := pq.Limit(1).All(setContextOp(ctx, pq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{project.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pq *ProjectQuery) FirstX(ctx context.Context) *Project {
	node, err := pq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Project ID from the query.
// Returns a *NotFoundError when no Project ID was found.
func (pq *ProjectQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pq.Limit(1).IDs(setContextOp(ctx, pq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{project.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pq *ProjectQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := pq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Project entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Project entity is found.
// Returns a *NotFoundError when no Project entities are found.
func (pq *ProjectQuery) Only(ctx context.Context) (*Project, error) {
	nodes, err := pq.Limit(2).All(setContextOp(ctx, pq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{project.Label}
	default:
		return nil, &NotSingularError{project.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pq *ProjectQuery) OnlyX(ctx context.Context) *Project {
	node, err := pq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Project ID in the query.
// Returns a *NotSingularError when more than one Project ID is found.
// Returns a *NotFoundError when no entities are found.
func (pq *ProjectQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pq.Limit(2).IDs(setContextOp(ctx, pq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{project.Label}
	default:
		err = &NotSingularError{project.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pq *ProjectQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := pq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Projects.
func (pq *ProjectQuery) All(ctx context.Context) ([]*Project, error) {
	ctx = setContextOp(ctx, pq.ctx, "All")
	if err := pq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Project, *ProjectQuery]()
	return withInterceptors[[]*Project](ctx, pq, qr, pq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pq *ProjectQuery) AllX(ctx context.Context) []*Project {
	nodes, err := pq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Project IDs.
func (pq *ProjectQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if pq.ctx.Unique == nil && pq.path != nil {
		pq.Unique(true)
	}
	ctx = setContextOp(ctx, pq.ctx, "IDs")
	if err = pq.Select(project.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pq *ProjectQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := pq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pq *ProjectQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pq.ctx, "Count")
	if err := pq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pq, querierCount[*ProjectQuery](), pq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pq *ProjectQuery) CountX(ctx context.Context) int {
	count, err := pq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pq *ProjectQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pq.ctx, "Exist")
	switch _, err := pq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pq *ProjectQuery) ExistX(ctx context.Context) bool {
	exist, err := pq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProjectQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pq *ProjectQuery) Clone() *ProjectQuery {
	if pq == nil {
		return nil
	}
	return &ProjectQuery{
		config:              pq.config,
		ctx:                 pq.ctx.Clone(),
		order:               append([]project.OrderOption{}, pq.order...),
		inters:              append([]Interceptor{}, pq.inters...),
		predicates:          append([]predicate.Project{}, pq.predicates...),
		withSecrets:         pq.withSecrets.Clone(),
		withTypescriptTypes: pq.withTypescriptTypes.Clone(),
		withFunctions:       pq.withFunctions.Clone(),
		withCustomHostnames: pq.withCustomHostnames.Clone(),
		withPgsodiumConfigs: pq.withPgsodiumConfigs.Clone(),
		withNetworkBans:     pq.withNetworkBans.Clone(),
		withBranches:        pq.withBranches.Clone(),
		withChildBranches:   pq.withChildBranches.Clone(),
		withAuthConfig:      pq.withAuthConfig.Clone(),
		// clone intermediate query.
		sql:  pq.sql.Clone(),
		path: pq.path,
	}
}

// WithSecrets tells the query-builder to eager-load the nodes that are connected to
// the "secrets" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithSecrets(opts ...func(*SecretQuery)) *ProjectQuery {
	query := (&SecretClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withSecrets = query
	return pq
}

// WithTypescriptTypes tells the query-builder to eager-load the nodes that are connected to
// the "typescriptTypes" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithTypescriptTypes(opts ...func(*TypeScriptTypeQuery)) *ProjectQuery {
	query := (&TypeScriptTypeClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withTypescriptTypes = query
	return pq
}

// WithFunctions tells the query-builder to eager-load the nodes that are connected to
// the "functions" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithFunctions(opts ...func(*FunctionQuery)) *ProjectQuery {
	query := (&FunctionClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withFunctions = query
	return pq
}

// WithCustomHostnames tells the query-builder to eager-load the nodes that are connected to
// the "customHostnames" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithCustomHostnames(opts ...func(*CustomHostnameQuery)) *ProjectQuery {
	query := (&CustomHostnameClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withCustomHostnames = query
	return pq
}

// WithPgsodiumConfigs tells the query-builder to eager-load the nodes that are connected to
// the "pgsodiumConfigs" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithPgsodiumConfigs(opts ...func(*PgsodiumConfigQuery)) *ProjectQuery {
	query := (&PgsodiumConfigClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withPgsodiumConfigs = query
	return pq
}

// WithNetworkBans tells the query-builder to eager-load the nodes that are connected to
// the "networkBans" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithNetworkBans(opts ...func(*NetworkBanQuery)) *ProjectQuery {
	query := (&NetworkBanClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withNetworkBans = query
	return pq
}

// WithBranches tells the query-builder to eager-load the nodes that are connected to
// the "branches" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithBranches(opts ...func(*BranchQuery)) *ProjectQuery {
	query := (&BranchClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withBranches = query
	return pq
}

// WithChildBranches tells the query-builder to eager-load the nodes that are connected to
// the "childBranches" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithChildBranches(opts ...func(*BranchQuery)) *ProjectQuery {
	query := (&BranchClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withChildBranches = query
	return pq
}

// WithAuthConfig tells the query-builder to eager-load the nodes that are connected to
// the "auth_config" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProjectQuery) WithAuthConfig(opts ...func(*AuthConfigQuery)) *ProjectQuery {
	query := (&AuthConfigClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withAuthConfig = query
	return pq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Project.Query().
//		GroupBy(project.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pq *ProjectQuery) GroupBy(field string, fields ...string) *ProjectGroupBy {
	pq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProjectGroupBy{build: pq}
	grbuild.flds = &pq.ctx.Fields
	grbuild.label = project.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.Project.Query().
//		Select(project.FieldName).
//		Scan(ctx, &v)
func (pq *ProjectQuery) Select(fields ...string) *ProjectSelect {
	pq.ctx.Fields = append(pq.ctx.Fields, fields...)
	sbuild := &ProjectSelect{ProjectQuery: pq}
	sbuild.label = project.Label
	sbuild.flds, sbuild.scan = &pq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProjectSelect configured with the given aggregations.
func (pq *ProjectQuery) Aggregate(fns ...AggregateFunc) *ProjectSelect {
	return pq.Select().Aggregate(fns...)
}

func (pq *ProjectQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pq); err != nil {
				return err
			}
		}
	}
	for _, f := range pq.ctx.Fields {
		if !project.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pq.path != nil {
		prev, err := pq.path(ctx)
		if err != nil {
			return err
		}
		pq.sql = prev
	}
	return nil
}

func (pq *ProjectQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Project, error) {
	var (
		nodes       = []*Project{}
		_spec       = pq.querySpec()
		loadedTypes = [9]bool{
			pq.withSecrets != nil,
			pq.withTypescriptTypes != nil,
			pq.withFunctions != nil,
			pq.withCustomHostnames != nil,
			pq.withPgsodiumConfigs != nil,
			pq.withNetworkBans != nil,
			pq.withBranches != nil,
			pq.withChildBranches != nil,
			pq.withAuthConfig != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Project).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Project{config: pq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pq.withSecrets; query != nil {
		if err := pq.loadSecrets(ctx, query, nodes,
			func(n *Project) { n.Edges.Secrets = []*Secret{} },
			func(n *Project, e *Secret) { n.Edges.Secrets = append(n.Edges.Secrets, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withTypescriptTypes; query != nil {
		if err := pq.loadTypescriptTypes(ctx, query, nodes,
			func(n *Project) { n.Edges.TypescriptTypes = []*TypeScriptType{} },
			func(n *Project, e *TypeScriptType) { n.Edges.TypescriptTypes = append(n.Edges.TypescriptTypes, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withFunctions; query != nil {
		if err := pq.loadFunctions(ctx, query, nodes,
			func(n *Project) { n.Edges.Functions = []*Function{} },
			func(n *Project, e *Function) { n.Edges.Functions = append(n.Edges.Functions, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withCustomHostnames; query != nil {
		if err := pq.loadCustomHostnames(ctx, query, nodes,
			func(n *Project) { n.Edges.CustomHostnames = []*CustomHostname{} },
			func(n *Project, e *CustomHostname) { n.Edges.CustomHostnames = append(n.Edges.CustomHostnames, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withPgsodiumConfigs; query != nil {
		if err := pq.loadPgsodiumConfigs(ctx, query, nodes,
			func(n *Project) { n.Edges.PgsodiumConfigs = []*PgsodiumConfig{} },
			func(n *Project, e *PgsodiumConfig) { n.Edges.PgsodiumConfigs = append(n.Edges.PgsodiumConfigs, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withNetworkBans; query != nil {
		if err := pq.loadNetworkBans(ctx, query, nodes,
			func(n *Project) { n.Edges.NetworkBans = []*NetworkBan{} },
			func(n *Project, e *NetworkBan) { n.Edges.NetworkBans = append(n.Edges.NetworkBans, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withBranches; query != nil {
		if err := pq.loadBranches(ctx, query, nodes,
			func(n *Project) { n.Edges.Branches = []*Branch{} },
			func(n *Project, e *Branch) { n.Edges.Branches = append(n.Edges.Branches, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withChildBranches; query != nil {
		if err := pq.loadChildBranches(ctx, query, nodes,
			func(n *Project) { n.Edges.ChildBranches = []*Branch{} },
			func(n *Project, e *Branch) { n.Edges.ChildBranches = append(n.Edges.ChildBranches, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withAuthConfig; query != nil {
		if err := pq.loadAuthConfig(ctx, query, nodes, nil,
			func(n *Project, e *AuthConfig) { n.Edges.AuthConfig = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pq *ProjectQuery) loadSecrets(ctx context.Context, query *SecretQuery, nodes []*Project, init func(*Project), assign func(*Project, *Secret)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(secret.FieldProjectID)
	}
	query.Where(predicate.Secret(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(project.SecretsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProjectID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "project_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadTypescriptTypes(ctx context.Context, query *TypeScriptTypeQuery, nodes []*Project, init func(*Project), assign func(*Project, *TypeScriptType)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(typescripttype.FieldProjectID)
	}
	query.Where(predicate.TypeScriptType(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(project.TypescriptTypesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProjectID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "project_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadFunctions(ctx context.Context, query *FunctionQuery, nodes []*Project, init func(*Project), assign func(*Project, *Function)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(function.FieldProjectID)
	}
	query.Where(predicate.Function(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(project.FunctionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProjectID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "project_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadCustomHostnames(ctx context.Context, query *CustomHostnameQuery, nodes []*Project, init func(*Project), assign func(*Project, *CustomHostname)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(customhostname.FieldProjectID)
	}
	query.Where(predicate.CustomHostname(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(project.CustomHostnamesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProjectID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "project_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadPgsodiumConfigs(ctx context.Context, query *PgsodiumConfigQuery, nodes []*Project, init func(*Project), assign func(*Project, *PgsodiumConfig)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(pgsodiumconfig.FieldProjectID)
	}
	query.Where(predicate.PgsodiumConfig(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(project.PgsodiumConfigsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProjectID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "project_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadNetworkBans(ctx context.Context, query *NetworkBanQuery, nodes []*Project, init func(*Project), assign func(*Project, *NetworkBan)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(networkban.FieldProjectID)
	}
	query.Where(predicate.NetworkBan(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(project.NetworkBansColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProjectID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "project_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadBranches(ctx context.Context, query *BranchQuery, nodes []*Project, init func(*Project), assign func(*Project, *Branch)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(branch.FieldProjectRef)
	}
	query.Where(predicate.Branch(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(project.BranchesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProjectRef
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "project_ref" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadChildBranches(ctx context.Context, query *BranchQuery, nodes []*Project, init func(*Project), assign func(*Project, *Branch)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(branch.FieldParentProjectRef)
	}
	query.Where(predicate.Branch(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(project.ChildBranchesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ParentProjectRef
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "parent_project_ref" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProjectQuery) loadAuthConfig(ctx context.Context, query *AuthConfigQuery, nodes []*Project, init func(*Project), assign func(*Project, *AuthConfig)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Project)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.AuthConfig(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(project.AuthConfigColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.project_auth_config
		if fk == nil {
			return fmt.Errorf(`foreign-key "project_auth_config" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "project_auth_config" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pq *ProjectQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pq.querySpec()
	_spec.Node.Columns = pq.ctx.Fields
	if len(pq.ctx.Fields) > 0 {
		_spec.Unique = pq.ctx.Unique != nil && *pq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pq.driver, _spec)
}

func (pq *ProjectQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID))
	_spec.From = pq.sql
	if unique := pq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pq.path != nil {
		_spec.Unique = true
	}
	if fields := pq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, project.FieldID)
		for i := range fields {
			if fields[i] != project.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pq *ProjectQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pq.driver.Dialect())
	t1 := builder.Table(project.Table)
	columns := pq.ctx.Fields
	if len(columns) == 0 {
		columns = project.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pq.sql != nil {
		selector = pq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pq.ctx.Unique != nil && *pq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pq.predicates {
		p(selector)
	}
	for _, p := range pq.order {
		p(selector)
	}
	if offset := pq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProjectGroupBy is the group-by builder for Project entities.
type ProjectGroupBy struct {
	selector
	build *ProjectQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pgb *ProjectGroupBy) Aggregate(fns ...AggregateFunc) *ProjectGroupBy {
	pgb.fns = append(pgb.fns, fns...)
	return pgb
}

// Scan applies the selector query and scans the result into the given value.
func (pgb *ProjectGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pgb.build.ctx, "GroupBy")
	if err := pgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProjectQuery, *ProjectGroupBy](ctx, pgb.build, pgb, pgb.build.inters, v)
}

func (pgb *ProjectGroupBy) sqlScan(ctx context.Context, root *ProjectQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pgb.fns))
	for _, fn := range pgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pgb.flds)+len(pgb.fns))
		for _, f := range *pgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProjectSelect is the builder for selecting fields of Project entities.
type ProjectSelect struct {
	*ProjectQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ps *ProjectSelect) Aggregate(fns ...AggregateFunc) *ProjectSelect {
	ps.fns = append(ps.fns, fns...)
	return ps
}

// Scan applies the selector query and scans the result into the given value.
func (ps *ProjectSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ps.ctx, "Select")
	if err := ps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProjectQuery, *ProjectSelect](ctx, ps.ProjectQuery, ps, ps.inters, v)
}

func (ps *ProjectSelect) sqlScan(ctx context.Context, root *ProjectQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ps.fns))
	for _, fn := range ps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
