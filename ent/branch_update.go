// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"tribemedia.io/m/ent/branch"
	"tribemedia.io/m/ent/predicate"
	"tribemedia.io/m/ent/project"
)

// BranchUpdate is the builder for updating Branch entities.
type BranchUpdate struct {
	config
	hooks    []Hook
	mutation *BranchMutation
}

// Where appends a list predicates to the BranchUpdate builder.
func (bu *BranchUpdate) Where(ps ...predicate.Branch) *BranchUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetName sets the "name" field.
func (bu *BranchUpdate) SetName(s string) *BranchUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bu *BranchUpdate) SetNillableName(s *string) *BranchUpdate {
	if s != nil {
		bu.SetName(*s)
	}
	return bu
}

// SetProjectRef sets the "project_ref" field.
func (bu *BranchUpdate) SetProjectRef(u uuid.UUID) *BranchUpdate {
	bu.mutation.SetProjectRef(u)
	return bu
}

// SetNillableProjectRef sets the "project_ref" field if the given value is not nil.
func (bu *BranchUpdate) SetNillableProjectRef(u *uuid.UUID) *BranchUpdate {
	if u != nil {
		bu.SetProjectRef(*u)
	}
	return bu
}

// ClearProjectRef clears the value of the "project_ref" field.
func (bu *BranchUpdate) ClearProjectRef() *BranchUpdate {
	bu.mutation.ClearProjectRef()
	return bu
}

// SetParentProjectRef sets the "parent_project_ref" field.
func (bu *BranchUpdate) SetParentProjectRef(u uuid.UUID) *BranchUpdate {
	bu.mutation.SetParentProjectRef(u)
	return bu
}

// SetNillableParentProjectRef sets the "parent_project_ref" field if the given value is not nil.
func (bu *BranchUpdate) SetNillableParentProjectRef(u *uuid.UUID) *BranchUpdate {
	if u != nil {
		bu.SetParentProjectRef(*u)
	}
	return bu
}

// ClearParentProjectRef clears the value of the "parent_project_ref" field.
func (bu *BranchUpdate) ClearParentProjectRef() *BranchUpdate {
	bu.mutation.ClearParentProjectRef()
	return bu
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (bu *BranchUpdate) SetProjectID(id uuid.UUID) *BranchUpdate {
	bu.mutation.SetProjectID(id)
	return bu
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (bu *BranchUpdate) SetNillableProjectID(id *uuid.UUID) *BranchUpdate {
	if id != nil {
		bu = bu.SetProjectID(*id)
	}
	return bu
}

// SetProject sets the "project" edge to the Project entity.
func (bu *BranchUpdate) SetProject(p *Project) *BranchUpdate {
	return bu.SetProjectID(p.ID)
}

// SetParentProjectID sets the "parentProject" edge to the Project entity by ID.
func (bu *BranchUpdate) SetParentProjectID(id uuid.UUID) *BranchUpdate {
	bu.mutation.SetParentProjectID(id)
	return bu
}

// SetNillableParentProjectID sets the "parentProject" edge to the Project entity by ID if the given value is not nil.
func (bu *BranchUpdate) SetNillableParentProjectID(id *uuid.UUID) *BranchUpdate {
	if id != nil {
		bu = bu.SetParentProjectID(*id)
	}
	return bu
}

// SetParentProject sets the "parentProject" edge to the Project entity.
func (bu *BranchUpdate) SetParentProject(p *Project) *BranchUpdate {
	return bu.SetParentProjectID(p.ID)
}

// Mutation returns the BranchMutation object of the builder.
func (bu *BranchUpdate) Mutation() *BranchMutation {
	return bu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (bu *BranchUpdate) ClearProject() *BranchUpdate {
	bu.mutation.ClearProject()
	return bu
}

// ClearParentProject clears the "parentProject" edge to the Project entity.
func (bu *BranchUpdate) ClearParentProject() *BranchUpdate {
	bu.mutation.ClearParentProject()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BranchUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BranchUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BranchUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BranchUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BranchUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(branch.Table, branch.Columns, sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUUID))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.SetField(branch.FieldName, field.TypeString, value)
	}
	if bu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   branch.ProjectTable,
			Columns: []string{branch.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   branch.ProjectTable,
			Columns: []string{branch.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.ParentProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   branch.ParentProjectTable,
			Columns: []string{branch.ParentProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.ParentProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   branch.ParentProjectTable,
			Columns: []string{branch.ParentProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{branch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BranchUpdateOne is the builder for updating a single Branch entity.
type BranchUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BranchMutation
}

// SetName sets the "name" field.
func (buo *BranchUpdateOne) SetName(s string) *BranchUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (buo *BranchUpdateOne) SetNillableName(s *string) *BranchUpdateOne {
	if s != nil {
		buo.SetName(*s)
	}
	return buo
}

// SetProjectRef sets the "project_ref" field.
func (buo *BranchUpdateOne) SetProjectRef(u uuid.UUID) *BranchUpdateOne {
	buo.mutation.SetProjectRef(u)
	return buo
}

// SetNillableProjectRef sets the "project_ref" field if the given value is not nil.
func (buo *BranchUpdateOne) SetNillableProjectRef(u *uuid.UUID) *BranchUpdateOne {
	if u != nil {
		buo.SetProjectRef(*u)
	}
	return buo
}

// ClearProjectRef clears the value of the "project_ref" field.
func (buo *BranchUpdateOne) ClearProjectRef() *BranchUpdateOne {
	buo.mutation.ClearProjectRef()
	return buo
}

// SetParentProjectRef sets the "parent_project_ref" field.
func (buo *BranchUpdateOne) SetParentProjectRef(u uuid.UUID) *BranchUpdateOne {
	buo.mutation.SetParentProjectRef(u)
	return buo
}

// SetNillableParentProjectRef sets the "parent_project_ref" field if the given value is not nil.
func (buo *BranchUpdateOne) SetNillableParentProjectRef(u *uuid.UUID) *BranchUpdateOne {
	if u != nil {
		buo.SetParentProjectRef(*u)
	}
	return buo
}

// ClearParentProjectRef clears the value of the "parent_project_ref" field.
func (buo *BranchUpdateOne) ClearParentProjectRef() *BranchUpdateOne {
	buo.mutation.ClearParentProjectRef()
	return buo
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (buo *BranchUpdateOne) SetProjectID(id uuid.UUID) *BranchUpdateOne {
	buo.mutation.SetProjectID(id)
	return buo
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (buo *BranchUpdateOne) SetNillableProjectID(id *uuid.UUID) *BranchUpdateOne {
	if id != nil {
		buo = buo.SetProjectID(*id)
	}
	return buo
}

// SetProject sets the "project" edge to the Project entity.
func (buo *BranchUpdateOne) SetProject(p *Project) *BranchUpdateOne {
	return buo.SetProjectID(p.ID)
}

// SetParentProjectID sets the "parentProject" edge to the Project entity by ID.
func (buo *BranchUpdateOne) SetParentProjectID(id uuid.UUID) *BranchUpdateOne {
	buo.mutation.SetParentProjectID(id)
	return buo
}

// SetNillableParentProjectID sets the "parentProject" edge to the Project entity by ID if the given value is not nil.
func (buo *BranchUpdateOne) SetNillableParentProjectID(id *uuid.UUID) *BranchUpdateOne {
	if id != nil {
		buo = buo.SetParentProjectID(*id)
	}
	return buo
}

// SetParentProject sets the "parentProject" edge to the Project entity.
func (buo *BranchUpdateOne) SetParentProject(p *Project) *BranchUpdateOne {
	return buo.SetParentProjectID(p.ID)
}

// Mutation returns the BranchMutation object of the builder.
func (buo *BranchUpdateOne) Mutation() *BranchMutation {
	return buo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (buo *BranchUpdateOne) ClearProject() *BranchUpdateOne {
	buo.mutation.ClearProject()
	return buo
}

// ClearParentProject clears the "parentProject" edge to the Project entity.
func (buo *BranchUpdateOne) ClearParentProject() *BranchUpdateOne {
	buo.mutation.ClearParentProject()
	return buo
}

// Where appends a list predicates to the BranchUpdate builder.
func (buo *BranchUpdateOne) Where(ps ...predicate.Branch) *BranchUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BranchUpdateOne) Select(field string, fields ...string) *BranchUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Branch entity.
func (buo *BranchUpdateOne) Save(ctx context.Context) (*Branch, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BranchUpdateOne) SaveX(ctx context.Context) *Branch {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BranchUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BranchUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BranchUpdateOne) sqlSave(ctx context.Context) (_node *Branch, err error) {
	_spec := sqlgraph.NewUpdateSpec(branch.Table, branch.Columns, sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUUID))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Branch.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, branch.FieldID)
		for _, f := range fields {
			if !branch.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != branch.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.SetField(branch.FieldName, field.TypeString, value)
	}
	if buo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   branch.ProjectTable,
			Columns: []string{branch.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   branch.ProjectTable,
			Columns: []string{branch.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.ParentProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   branch.ParentProjectTable,
			Columns: []string{branch.ParentProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.ParentProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   branch.ParentProjectTable,
			Columns: []string{branch.ParentProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Branch{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{branch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
