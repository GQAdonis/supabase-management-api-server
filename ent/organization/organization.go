// Code generated by ent, DO NOT EDIT.

package organization

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the organization type in the database.
	Label = "organization"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeProviders holds the string denoting the providers edge name in mutations.
	EdgeProviders = "providers"
	// EdgeThirdPartyAuths holds the string denoting the third_party_auths edge name in mutations.
	EdgeThirdPartyAuths = "third_party_auths"
	// Table holds the table name of the organization in the database.
	Table = "organizations"
	// ProvidersTable is the table that holds the providers relation/edge.
	ProvidersTable = "providers"
	// ProvidersInverseTable is the table name for the Provider entity.
	// It exists in this package in order to avoid circular dependency with the "provider" package.
	ProvidersInverseTable = "providers"
	// ProvidersColumn is the table column denoting the providers relation/edge.
	ProvidersColumn = "organization_providers"
	// ThirdPartyAuthsTable is the table that holds the third_party_auths relation/edge.
	ThirdPartyAuthsTable = "third_party_auths"
	// ThirdPartyAuthsInverseTable is the table name for the ThirdPartyAuth entity.
	// It exists in this package in order to avoid circular dependency with the "thirdpartyauth" package.
	ThirdPartyAuthsInverseTable = "third_party_auths"
	// ThirdPartyAuthsColumn is the table column denoting the third_party_auths relation/edge.
	ThirdPartyAuthsColumn = "organization_third_party_auths"
)

// Columns holds all SQL columns for organization fields.
var Columns = []string{
	FieldID,
	FieldName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the Organization queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByProvidersCount orders the results by providers count.
func ByProvidersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProvidersStep(), opts...)
	}
}

// ByProviders orders the results by providers terms.
func ByProviders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProvidersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByThirdPartyAuthsCount orders the results by third_party_auths count.
func ByThirdPartyAuthsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newThirdPartyAuthsStep(), opts...)
	}
}

// ByThirdPartyAuths orders the results by third_party_auths terms.
func ByThirdPartyAuths(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newThirdPartyAuthsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProvidersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProvidersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProvidersTable, ProvidersColumn),
	)
}
func newThirdPartyAuthsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ThirdPartyAuthsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ThirdPartyAuthsTable, ThirdPartyAuthsColumn),
	)
}
