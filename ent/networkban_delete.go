// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"tribemedia.io/m/ent/networkban"
	"tribemedia.io/m/ent/predicate"
)

// NetworkBanDelete is the builder for deleting a NetworkBan entity.
type NetworkBanDelete struct {
	config
	hooks    []Hook
	mutation *NetworkBanMutation
}

// Where appends a list predicates to the NetworkBanDelete builder.
func (nbd *NetworkBanDelete) Where(ps ...predicate.NetworkBan) *NetworkBanDelete {
	nbd.mutation.Where(ps...)
	return nbd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (nbd *NetworkBanDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, nbd.sqlExec, nbd.mutation, nbd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (nbd *NetworkBanDelete) ExecX(ctx context.Context) int {
	n, err := nbd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (nbd *NetworkBanDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(networkban.Table, sqlgraph.NewFieldSpec(networkban.FieldID, field.TypeUUID))
	if ps := nbd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, nbd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	nbd.mutation.done = true
	return affected, err
}

// NetworkBanDeleteOne is the builder for deleting a single NetworkBan entity.
type NetworkBanDeleteOne struct {
	nbd *NetworkBanDelete
}

// Where appends a list predicates to the NetworkBanDelete builder.
func (nbdo *NetworkBanDeleteOne) Where(ps ...predicate.NetworkBan) *NetworkBanDeleteOne {
	nbdo.nbd.mutation.Where(ps...)
	return nbdo
}

// Exec executes the deletion query.
func (nbdo *NetworkBanDeleteOne) Exec(ctx context.Context) error {
	n, err := nbdo.nbd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{networkban.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (nbdo *NetworkBanDeleteOne) ExecX(ctx context.Context) {
	if err := nbdo.Exec(ctx); err != nil {
		panic(err)
	}
}
