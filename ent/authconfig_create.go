// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"tribemedia.io/m/ent/authconfig"
	"tribemedia.io/m/ent/project"
)

// AuthConfigCreate is the builder for creating a AuthConfig entity.
type AuthConfigCreate struct {
	config
	mutation *AuthConfigMutation
	hooks    []Hook
}

// SetDisableSignup sets the "disable_signup" field.
func (acc *AuthConfigCreate) SetDisableSignup(b bool) *AuthConfigCreate {
	acc.mutation.SetDisableSignup(b)
	return acc
}

// SetExternalEmailEnabled sets the "external_email_enabled" field.
func (acc *AuthConfigCreate) SetExternalEmailEnabled(b bool) *AuthConfigCreate {
	acc.mutation.SetExternalEmailEnabled(b)
	return acc
}

// SetID sets the "id" field.
func (acc *AuthConfigCreate) SetID(u uuid.UUID) *AuthConfigCreate {
	acc.mutation.SetID(u)
	return acc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (acc *AuthConfigCreate) SetNillableID(u *uuid.UUID) *AuthConfigCreate {
	if u != nil {
		acc.SetID(*u)
	}
	return acc
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (acc *AuthConfigCreate) SetProjectID(id uuid.UUID) *AuthConfigCreate {
	acc.mutation.SetProjectID(id)
	return acc
}

// SetProject sets the "project" edge to the Project entity.
func (acc *AuthConfigCreate) SetProject(p *Project) *AuthConfigCreate {
	return acc.SetProjectID(p.ID)
}

// Mutation returns the AuthConfigMutation object of the builder.
func (acc *AuthConfigCreate) Mutation() *AuthConfigMutation {
	return acc.mutation
}

// Save creates the AuthConfig in the database.
func (acc *AuthConfigCreate) Save(ctx context.Context) (*AuthConfig, error) {
	acc.defaults()
	return withHooks(ctx, acc.sqlSave, acc.mutation, acc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (acc *AuthConfigCreate) SaveX(ctx context.Context) *AuthConfig {
	v, err := acc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acc *AuthConfigCreate) Exec(ctx context.Context) error {
	_, err := acc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acc *AuthConfigCreate) ExecX(ctx context.Context) {
	if err := acc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acc *AuthConfigCreate) defaults() {
	if _, ok := acc.mutation.ID(); !ok {
		v := authconfig.DefaultID()
		acc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acc *AuthConfigCreate) check() error {
	if _, ok := acc.mutation.DisableSignup(); !ok {
		return &ValidationError{Name: "disable_signup", err: errors.New(`ent: missing required field "AuthConfig.disable_signup"`)}
	}
	if _, ok := acc.mutation.ExternalEmailEnabled(); !ok {
		return &ValidationError{Name: "external_email_enabled", err: errors.New(`ent: missing required field "AuthConfig.external_email_enabled"`)}
	}
	if _, ok := acc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "AuthConfig.project"`)}
	}
	return nil
}

func (acc *AuthConfigCreate) sqlSave(ctx context.Context) (*AuthConfig, error) {
	if err := acc.check(); err != nil {
		return nil, err
	}
	_node, _spec := acc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	acc.mutation.id = &_node.ID
	acc.mutation.done = true
	return _node, nil
}

func (acc *AuthConfigCreate) createSpec() (*AuthConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &AuthConfig{config: acc.config}
		_spec = sqlgraph.NewCreateSpec(authconfig.Table, sqlgraph.NewFieldSpec(authconfig.FieldID, field.TypeUUID))
	)
	if id, ok := acc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := acc.mutation.DisableSignup(); ok {
		_spec.SetField(authconfig.FieldDisableSignup, field.TypeBool, value)
		_node.DisableSignup = value
	}
	if value, ok := acc.mutation.ExternalEmailEnabled(); ok {
		_spec.SetField(authconfig.FieldExternalEmailEnabled, field.TypeBool, value)
		_node.ExternalEmailEnabled = value
	}
	if nodes := acc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   authconfig.ProjectTable,
			Columns: []string{authconfig.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_auth_config = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AuthConfigCreateBulk is the builder for creating many AuthConfig entities in bulk.
type AuthConfigCreateBulk struct {
	config
	err      error
	builders []*AuthConfigCreate
}

// Save creates the AuthConfig entities in the database.
func (accb *AuthConfigCreateBulk) Save(ctx context.Context) ([]*AuthConfig, error) {
	if accb.err != nil {
		return nil, accb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(accb.builders))
	nodes := make([]*AuthConfig, len(accb.builders))
	mutators := make([]Mutator, len(accb.builders))
	for i := range accb.builders {
		func(i int, root context.Context) {
			builder := accb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, accb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, accb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, accb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (accb *AuthConfigCreateBulk) SaveX(ctx context.Context) []*AuthConfig {
	v, err := accb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (accb *AuthConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := accb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (accb *AuthConfigCreateBulk) ExecX(ctx context.Context) {
	if err := accb.Exec(ctx); err != nil {
		panic(err)
	}
}
