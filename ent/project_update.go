// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"tribemedia.io/m/ent/authconfig"
	"tribemedia.io/m/ent/branch"
	"tribemedia.io/m/ent/customhostname"
	"tribemedia.io/m/ent/function"
	"tribemedia.io/m/ent/networkban"
	"tribemedia.io/m/ent/pgsodiumconfig"
	"tribemedia.io/m/ent/predicate"
	"tribemedia.io/m/ent/project"
	"tribemedia.io/m/ent/secret"
	"tribemedia.io/m/ent/typescripttype"
)

// ProjectUpdate is the builder for updating Project entities.
type ProjectUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectMutation
}

// Where appends a list predicates to the ProjectUpdate builder.
func (pu *ProjectUpdate) Where(ps ...predicate.Project) *ProjectUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *ProjectUpdate) SetName(s string) *ProjectUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableName(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// AddSecretIDs adds the "secrets" edge to the Secret entity by IDs.
func (pu *ProjectUpdate) AddSecretIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.AddSecretIDs(ids...)
	return pu
}

// AddSecrets adds the "secrets" edges to the Secret entity.
func (pu *ProjectUpdate) AddSecrets(s ...*Secret) *ProjectUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddSecretIDs(ids...)
}

// AddTypescriptTypeIDs adds the "typescriptTypes" edge to the TypeScriptType entity by IDs.
func (pu *ProjectUpdate) AddTypescriptTypeIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.AddTypescriptTypeIDs(ids...)
	return pu
}

// AddTypescriptTypes adds the "typescriptTypes" edges to the TypeScriptType entity.
func (pu *ProjectUpdate) AddTypescriptTypes(t ...*TypeScriptType) *ProjectUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddTypescriptTypeIDs(ids...)
}

// AddFunctionIDs adds the "functions" edge to the Function entity by IDs.
func (pu *ProjectUpdate) AddFunctionIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.AddFunctionIDs(ids...)
	return pu
}

// AddFunctions adds the "functions" edges to the Function entity.
func (pu *ProjectUpdate) AddFunctions(f ...*Function) *ProjectUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.AddFunctionIDs(ids...)
}

// AddCustomHostnameIDs adds the "customHostnames" edge to the CustomHostname entity by IDs.
func (pu *ProjectUpdate) AddCustomHostnameIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.AddCustomHostnameIDs(ids...)
	return pu
}

// AddCustomHostnames adds the "customHostnames" edges to the CustomHostname entity.
func (pu *ProjectUpdate) AddCustomHostnames(c ...*CustomHostname) *ProjectUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCustomHostnameIDs(ids...)
}

// AddPgsodiumConfigIDs adds the "pgsodiumConfigs" edge to the PgsodiumConfig entity by IDs.
func (pu *ProjectUpdate) AddPgsodiumConfigIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.AddPgsodiumConfigIDs(ids...)
	return pu
}

// AddPgsodiumConfigs adds the "pgsodiumConfigs" edges to the PgsodiumConfig entity.
func (pu *ProjectUpdate) AddPgsodiumConfigs(p ...*PgsodiumConfig) *ProjectUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPgsodiumConfigIDs(ids...)
}

// AddNetworkBanIDs adds the "networkBans" edge to the NetworkBan entity by IDs.
func (pu *ProjectUpdate) AddNetworkBanIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.AddNetworkBanIDs(ids...)
	return pu
}

// AddNetworkBans adds the "networkBans" edges to the NetworkBan entity.
func (pu *ProjectUpdate) AddNetworkBans(n ...*NetworkBan) *ProjectUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pu.AddNetworkBanIDs(ids...)
}

// AddBranchIDs adds the "branches" edge to the Branch entity by IDs.
func (pu *ProjectUpdate) AddBranchIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.AddBranchIDs(ids...)
	return pu
}

// AddBranches adds the "branches" edges to the Branch entity.
func (pu *ProjectUpdate) AddBranches(b ...*Branch) *ProjectUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.AddBranchIDs(ids...)
}

// AddChildBranchIDs adds the "childBranches" edge to the Branch entity by IDs.
func (pu *ProjectUpdate) AddChildBranchIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.AddChildBranchIDs(ids...)
	return pu
}

// AddChildBranches adds the "childBranches" edges to the Branch entity.
func (pu *ProjectUpdate) AddChildBranches(b ...*Branch) *ProjectUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.AddChildBranchIDs(ids...)
}

// SetAuthConfigID sets the "auth_config" edge to the AuthConfig entity by ID.
func (pu *ProjectUpdate) SetAuthConfigID(id uuid.UUID) *ProjectUpdate {
	pu.mutation.SetAuthConfigID(id)
	return pu
}

// SetNillableAuthConfigID sets the "auth_config" edge to the AuthConfig entity by ID if the given value is not nil.
func (pu *ProjectUpdate) SetNillableAuthConfigID(id *uuid.UUID) *ProjectUpdate {
	if id != nil {
		pu = pu.SetAuthConfigID(*id)
	}
	return pu
}

// SetAuthConfig sets the "auth_config" edge to the AuthConfig entity.
func (pu *ProjectUpdate) SetAuthConfig(a *AuthConfig) *ProjectUpdate {
	return pu.SetAuthConfigID(a.ID)
}

// Mutation returns the ProjectMutation object of the builder.
func (pu *ProjectUpdate) Mutation() *ProjectMutation {
	return pu.mutation
}

// ClearSecrets clears all "secrets" edges to the Secret entity.
func (pu *ProjectUpdate) ClearSecrets() *ProjectUpdate {
	pu.mutation.ClearSecrets()
	return pu
}

// RemoveSecretIDs removes the "secrets" edge to Secret entities by IDs.
func (pu *ProjectUpdate) RemoveSecretIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.RemoveSecretIDs(ids...)
	return pu
}

// RemoveSecrets removes "secrets" edges to Secret entities.
func (pu *ProjectUpdate) RemoveSecrets(s ...*Secret) *ProjectUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveSecretIDs(ids...)
}

// ClearTypescriptTypes clears all "typescriptTypes" edges to the TypeScriptType entity.
func (pu *ProjectUpdate) ClearTypescriptTypes() *ProjectUpdate {
	pu.mutation.ClearTypescriptTypes()
	return pu
}

// RemoveTypescriptTypeIDs removes the "typescriptTypes" edge to TypeScriptType entities by IDs.
func (pu *ProjectUpdate) RemoveTypescriptTypeIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.RemoveTypescriptTypeIDs(ids...)
	return pu
}

// RemoveTypescriptTypes removes "typescriptTypes" edges to TypeScriptType entities.
func (pu *ProjectUpdate) RemoveTypescriptTypes(t ...*TypeScriptType) *ProjectUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemoveTypescriptTypeIDs(ids...)
}

// ClearFunctions clears all "functions" edges to the Function entity.
func (pu *ProjectUpdate) ClearFunctions() *ProjectUpdate {
	pu.mutation.ClearFunctions()
	return pu
}

// RemoveFunctionIDs removes the "functions" edge to Function entities by IDs.
func (pu *ProjectUpdate) RemoveFunctionIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.RemoveFunctionIDs(ids...)
	return pu
}

// RemoveFunctions removes "functions" edges to Function entities.
func (pu *ProjectUpdate) RemoveFunctions(f ...*Function) *ProjectUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.RemoveFunctionIDs(ids...)
}

// ClearCustomHostnames clears all "customHostnames" edges to the CustomHostname entity.
func (pu *ProjectUpdate) ClearCustomHostnames() *ProjectUpdate {
	pu.mutation.ClearCustomHostnames()
	return pu
}

// RemoveCustomHostnameIDs removes the "customHostnames" edge to CustomHostname entities by IDs.
func (pu *ProjectUpdate) RemoveCustomHostnameIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.RemoveCustomHostnameIDs(ids...)
	return pu
}

// RemoveCustomHostnames removes "customHostnames" edges to CustomHostname entities.
func (pu *ProjectUpdate) RemoveCustomHostnames(c ...*CustomHostname) *ProjectUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCustomHostnameIDs(ids...)
}

// ClearPgsodiumConfigs clears all "pgsodiumConfigs" edges to the PgsodiumConfig entity.
func (pu *ProjectUpdate) ClearPgsodiumConfigs() *ProjectUpdate {
	pu.mutation.ClearPgsodiumConfigs()
	return pu
}

// RemovePgsodiumConfigIDs removes the "pgsodiumConfigs" edge to PgsodiumConfig entities by IDs.
func (pu *ProjectUpdate) RemovePgsodiumConfigIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.RemovePgsodiumConfigIDs(ids...)
	return pu
}

// RemovePgsodiumConfigs removes "pgsodiumConfigs" edges to PgsodiumConfig entities.
func (pu *ProjectUpdate) RemovePgsodiumConfigs(p ...*PgsodiumConfig) *ProjectUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePgsodiumConfigIDs(ids...)
}

// ClearNetworkBans clears all "networkBans" edges to the NetworkBan entity.
func (pu *ProjectUpdate) ClearNetworkBans() *ProjectUpdate {
	pu.mutation.ClearNetworkBans()
	return pu
}

// RemoveNetworkBanIDs removes the "networkBans" edge to NetworkBan entities by IDs.
func (pu *ProjectUpdate) RemoveNetworkBanIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.RemoveNetworkBanIDs(ids...)
	return pu
}

// RemoveNetworkBans removes "networkBans" edges to NetworkBan entities.
func (pu *ProjectUpdate) RemoveNetworkBans(n ...*NetworkBan) *ProjectUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pu.RemoveNetworkBanIDs(ids...)
}

// ClearBranches clears all "branches" edges to the Branch entity.
func (pu *ProjectUpdate) ClearBranches() *ProjectUpdate {
	pu.mutation.ClearBranches()
	return pu
}

// RemoveBranchIDs removes the "branches" edge to Branch entities by IDs.
func (pu *ProjectUpdate) RemoveBranchIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.RemoveBranchIDs(ids...)
	return pu
}

// RemoveBranches removes "branches" edges to Branch entities.
func (pu *ProjectUpdate) RemoveBranches(b ...*Branch) *ProjectUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.RemoveBranchIDs(ids...)
}

// ClearChildBranches clears all "childBranches" edges to the Branch entity.
func (pu *ProjectUpdate) ClearChildBranches() *ProjectUpdate {
	pu.mutation.ClearChildBranches()
	return pu
}

// RemoveChildBranchIDs removes the "childBranches" edge to Branch entities by IDs.
func (pu *ProjectUpdate) RemoveChildBranchIDs(ids ...uuid.UUID) *ProjectUpdate {
	pu.mutation.RemoveChildBranchIDs(ids...)
	return pu
}

// RemoveChildBranches removes "childBranches" edges to Branch entities.
func (pu *ProjectUpdate) RemoveChildBranches(b ...*Branch) *ProjectUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.RemoveChildBranchIDs(ids...)
}

// ClearAuthConfig clears the "auth_config" edge to the AuthConfig entity.
func (pu *ProjectUpdate) ClearAuthConfig() *ProjectUpdate {
	pu.mutation.ClearAuthConfig()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProjectUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProjectUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProjectUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *ProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if pu.mutation.SecretsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.SecretsTable,
			Columns: []string{project.SecretsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(secret.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedSecretsIDs(); len(nodes) > 0 && !pu.mutation.SecretsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.SecretsTable,
			Columns: []string{project.SecretsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(secret.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SecretsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.SecretsTable,
			Columns: []string{project.SecretsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(secret.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.TypescriptTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.TypescriptTypesTable,
			Columns: []string{project.TypescriptTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(typescripttype.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedTypescriptTypesIDs(); len(nodes) > 0 && !pu.mutation.TypescriptTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.TypescriptTypesTable,
			Columns: []string{project.TypescriptTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(typescripttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TypescriptTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.TypescriptTypesTable,
			Columns: []string{project.TypescriptTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(typescripttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.FunctionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.FunctionsTable,
			Columns: []string{project.FunctionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(function.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedFunctionsIDs(); len(nodes) > 0 && !pu.mutation.FunctionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.FunctionsTable,
			Columns: []string{project.FunctionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(function.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FunctionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.FunctionsTable,
			Columns: []string{project.FunctionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(function.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CustomHostnamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.CustomHostnamesTable,
			Columns: []string{project.CustomHostnamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customhostname.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCustomHostnamesIDs(); len(nodes) > 0 && !pu.mutation.CustomHostnamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.CustomHostnamesTable,
			Columns: []string{project.CustomHostnamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customhostname.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CustomHostnamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.CustomHostnamesTable,
			Columns: []string{project.CustomHostnamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customhostname.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PgsodiumConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.PgsodiumConfigsTable,
			Columns: []string{project.PgsodiumConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pgsodiumconfig.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPgsodiumConfigsIDs(); len(nodes) > 0 && !pu.mutation.PgsodiumConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.PgsodiumConfigsTable,
			Columns: []string{project.PgsodiumConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pgsodiumconfig.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PgsodiumConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.PgsodiumConfigsTable,
			Columns: []string{project.PgsodiumConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pgsodiumconfig.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.NetworkBansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.NetworkBansTable,
			Columns: []string{project.NetworkBansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(networkban.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedNetworkBansIDs(); len(nodes) > 0 && !pu.mutation.NetworkBansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.NetworkBansTable,
			Columns: []string{project.NetworkBansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(networkban.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.NetworkBansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.NetworkBansTable,
			Columns: []string{project.NetworkBansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(networkban.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.BranchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.BranchesTable,
			Columns: []string{project.BranchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedBranchesIDs(); len(nodes) > 0 && !pu.mutation.BranchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.BranchesTable,
			Columns: []string{project.BranchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BranchesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.BranchesTable,
			Columns: []string{project.BranchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ChildBranchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ChildBranchesTable,
			Columns: []string{project.ChildBranchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedChildBranchesIDs(); len(nodes) > 0 && !pu.mutation.ChildBranchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ChildBranchesTable,
			Columns: []string{project.ChildBranchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ChildBranchesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ChildBranchesTable,
			Columns: []string{project.ChildBranchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.AuthConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   project.AuthConfigTable,
			Columns: []string{project.AuthConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authconfig.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AuthConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   project.AuthConfigTable,
			Columns: []string{project.AuthConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authconfig.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProjectUpdateOne is the builder for updating a single Project entity.
type ProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectMutation
}

// SetName sets the "name" field.
func (puo *ProjectUpdateOne) SetName(s string) *ProjectUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableName(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// AddSecretIDs adds the "secrets" edge to the Secret entity by IDs.
func (puo *ProjectUpdateOne) AddSecretIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.AddSecretIDs(ids...)
	return puo
}

// AddSecrets adds the "secrets" edges to the Secret entity.
func (puo *ProjectUpdateOne) AddSecrets(s ...*Secret) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddSecretIDs(ids...)
}

// AddTypescriptTypeIDs adds the "typescriptTypes" edge to the TypeScriptType entity by IDs.
func (puo *ProjectUpdateOne) AddTypescriptTypeIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.AddTypescriptTypeIDs(ids...)
	return puo
}

// AddTypescriptTypes adds the "typescriptTypes" edges to the TypeScriptType entity.
func (puo *ProjectUpdateOne) AddTypescriptTypes(t ...*TypeScriptType) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddTypescriptTypeIDs(ids...)
}

// AddFunctionIDs adds the "functions" edge to the Function entity by IDs.
func (puo *ProjectUpdateOne) AddFunctionIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.AddFunctionIDs(ids...)
	return puo
}

// AddFunctions adds the "functions" edges to the Function entity.
func (puo *ProjectUpdateOne) AddFunctions(f ...*Function) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.AddFunctionIDs(ids...)
}

// AddCustomHostnameIDs adds the "customHostnames" edge to the CustomHostname entity by IDs.
func (puo *ProjectUpdateOne) AddCustomHostnameIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.AddCustomHostnameIDs(ids...)
	return puo
}

// AddCustomHostnames adds the "customHostnames" edges to the CustomHostname entity.
func (puo *ProjectUpdateOne) AddCustomHostnames(c ...*CustomHostname) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCustomHostnameIDs(ids...)
}

// AddPgsodiumConfigIDs adds the "pgsodiumConfigs" edge to the PgsodiumConfig entity by IDs.
func (puo *ProjectUpdateOne) AddPgsodiumConfigIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.AddPgsodiumConfigIDs(ids...)
	return puo
}

// AddPgsodiumConfigs adds the "pgsodiumConfigs" edges to the PgsodiumConfig entity.
func (puo *ProjectUpdateOne) AddPgsodiumConfigs(p ...*PgsodiumConfig) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPgsodiumConfigIDs(ids...)
}

// AddNetworkBanIDs adds the "networkBans" edge to the NetworkBan entity by IDs.
func (puo *ProjectUpdateOne) AddNetworkBanIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.AddNetworkBanIDs(ids...)
	return puo
}

// AddNetworkBans adds the "networkBans" edges to the NetworkBan entity.
func (puo *ProjectUpdateOne) AddNetworkBans(n ...*NetworkBan) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return puo.AddNetworkBanIDs(ids...)
}

// AddBranchIDs adds the "branches" edge to the Branch entity by IDs.
func (puo *ProjectUpdateOne) AddBranchIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.AddBranchIDs(ids...)
	return puo
}

// AddBranches adds the "branches" edges to the Branch entity.
func (puo *ProjectUpdateOne) AddBranches(b ...*Branch) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.AddBranchIDs(ids...)
}

// AddChildBranchIDs adds the "childBranches" edge to the Branch entity by IDs.
func (puo *ProjectUpdateOne) AddChildBranchIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.AddChildBranchIDs(ids...)
	return puo
}

// AddChildBranches adds the "childBranches" edges to the Branch entity.
func (puo *ProjectUpdateOne) AddChildBranches(b ...*Branch) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.AddChildBranchIDs(ids...)
}

// SetAuthConfigID sets the "auth_config" edge to the AuthConfig entity by ID.
func (puo *ProjectUpdateOne) SetAuthConfigID(id uuid.UUID) *ProjectUpdateOne {
	puo.mutation.SetAuthConfigID(id)
	return puo
}

// SetNillableAuthConfigID sets the "auth_config" edge to the AuthConfig entity by ID if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableAuthConfigID(id *uuid.UUID) *ProjectUpdateOne {
	if id != nil {
		puo = puo.SetAuthConfigID(*id)
	}
	return puo
}

// SetAuthConfig sets the "auth_config" edge to the AuthConfig entity.
func (puo *ProjectUpdateOne) SetAuthConfig(a *AuthConfig) *ProjectUpdateOne {
	return puo.SetAuthConfigID(a.ID)
}

// Mutation returns the ProjectMutation object of the builder.
func (puo *ProjectUpdateOne) Mutation() *ProjectMutation {
	return puo.mutation
}

// ClearSecrets clears all "secrets" edges to the Secret entity.
func (puo *ProjectUpdateOne) ClearSecrets() *ProjectUpdateOne {
	puo.mutation.ClearSecrets()
	return puo
}

// RemoveSecretIDs removes the "secrets" edge to Secret entities by IDs.
func (puo *ProjectUpdateOne) RemoveSecretIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.RemoveSecretIDs(ids...)
	return puo
}

// RemoveSecrets removes "secrets" edges to Secret entities.
func (puo *ProjectUpdateOne) RemoveSecrets(s ...*Secret) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveSecretIDs(ids...)
}

// ClearTypescriptTypes clears all "typescriptTypes" edges to the TypeScriptType entity.
func (puo *ProjectUpdateOne) ClearTypescriptTypes() *ProjectUpdateOne {
	puo.mutation.ClearTypescriptTypes()
	return puo
}

// RemoveTypescriptTypeIDs removes the "typescriptTypes" edge to TypeScriptType entities by IDs.
func (puo *ProjectUpdateOne) RemoveTypescriptTypeIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.RemoveTypescriptTypeIDs(ids...)
	return puo
}

// RemoveTypescriptTypes removes "typescriptTypes" edges to TypeScriptType entities.
func (puo *ProjectUpdateOne) RemoveTypescriptTypes(t ...*TypeScriptType) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemoveTypescriptTypeIDs(ids...)
}

// ClearFunctions clears all "functions" edges to the Function entity.
func (puo *ProjectUpdateOne) ClearFunctions() *ProjectUpdateOne {
	puo.mutation.ClearFunctions()
	return puo
}

// RemoveFunctionIDs removes the "functions" edge to Function entities by IDs.
func (puo *ProjectUpdateOne) RemoveFunctionIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.RemoveFunctionIDs(ids...)
	return puo
}

// RemoveFunctions removes "functions" edges to Function entities.
func (puo *ProjectUpdateOne) RemoveFunctions(f ...*Function) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.RemoveFunctionIDs(ids...)
}

// ClearCustomHostnames clears all "customHostnames" edges to the CustomHostname entity.
func (puo *ProjectUpdateOne) ClearCustomHostnames() *ProjectUpdateOne {
	puo.mutation.ClearCustomHostnames()
	return puo
}

// RemoveCustomHostnameIDs removes the "customHostnames" edge to CustomHostname entities by IDs.
func (puo *ProjectUpdateOne) RemoveCustomHostnameIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.RemoveCustomHostnameIDs(ids...)
	return puo
}

// RemoveCustomHostnames removes "customHostnames" edges to CustomHostname entities.
func (puo *ProjectUpdateOne) RemoveCustomHostnames(c ...*CustomHostname) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCustomHostnameIDs(ids...)
}

// ClearPgsodiumConfigs clears all "pgsodiumConfigs" edges to the PgsodiumConfig entity.
func (puo *ProjectUpdateOne) ClearPgsodiumConfigs() *ProjectUpdateOne {
	puo.mutation.ClearPgsodiumConfigs()
	return puo
}

// RemovePgsodiumConfigIDs removes the "pgsodiumConfigs" edge to PgsodiumConfig entities by IDs.
func (puo *ProjectUpdateOne) RemovePgsodiumConfigIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.RemovePgsodiumConfigIDs(ids...)
	return puo
}

// RemovePgsodiumConfigs removes "pgsodiumConfigs" edges to PgsodiumConfig entities.
func (puo *ProjectUpdateOne) RemovePgsodiumConfigs(p ...*PgsodiumConfig) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePgsodiumConfigIDs(ids...)
}

// ClearNetworkBans clears all "networkBans" edges to the NetworkBan entity.
func (puo *ProjectUpdateOne) ClearNetworkBans() *ProjectUpdateOne {
	puo.mutation.ClearNetworkBans()
	return puo
}

// RemoveNetworkBanIDs removes the "networkBans" edge to NetworkBan entities by IDs.
func (puo *ProjectUpdateOne) RemoveNetworkBanIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.RemoveNetworkBanIDs(ids...)
	return puo
}

// RemoveNetworkBans removes "networkBans" edges to NetworkBan entities.
func (puo *ProjectUpdateOne) RemoveNetworkBans(n ...*NetworkBan) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return puo.RemoveNetworkBanIDs(ids...)
}

// ClearBranches clears all "branches" edges to the Branch entity.
func (puo *ProjectUpdateOne) ClearBranches() *ProjectUpdateOne {
	puo.mutation.ClearBranches()
	return puo
}

// RemoveBranchIDs removes the "branches" edge to Branch entities by IDs.
func (puo *ProjectUpdateOne) RemoveBranchIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.RemoveBranchIDs(ids...)
	return puo
}

// RemoveBranches removes "branches" edges to Branch entities.
func (puo *ProjectUpdateOne) RemoveBranches(b ...*Branch) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.RemoveBranchIDs(ids...)
}

// ClearChildBranches clears all "childBranches" edges to the Branch entity.
func (puo *ProjectUpdateOne) ClearChildBranches() *ProjectUpdateOne {
	puo.mutation.ClearChildBranches()
	return puo
}

// RemoveChildBranchIDs removes the "childBranches" edge to Branch entities by IDs.
func (puo *ProjectUpdateOne) RemoveChildBranchIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	puo.mutation.RemoveChildBranchIDs(ids...)
	return puo
}

// RemoveChildBranches removes "childBranches" edges to Branch entities.
func (puo *ProjectUpdateOne) RemoveChildBranches(b ...*Branch) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.RemoveChildBranchIDs(ids...)
}

// ClearAuthConfig clears the "auth_config" edge to the AuthConfig entity.
func (puo *ProjectUpdateOne) ClearAuthConfig() *ProjectUpdateOne {
	puo.mutation.ClearAuthConfig()
	return puo
}

// Where appends a list predicates to the ProjectUpdate builder.
func (puo *ProjectUpdateOne) Where(ps ...predicate.Project) *ProjectUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProjectUpdateOne) Select(field string, fields ...string) *ProjectUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Project entity.
func (puo *ProjectUpdateOne) Save(ctx context.Context) (*Project, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProjectUpdateOne) SaveX(ctx context.Context) *Project {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProjectUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *ProjectUpdateOne) sqlSave(ctx context.Context) (_node *Project, err error) {
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Project.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, project.FieldID)
		for _, f := range fields {
			if !project.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != project.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if puo.mutation.SecretsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.SecretsTable,
			Columns: []string{project.SecretsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(secret.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedSecretsIDs(); len(nodes) > 0 && !puo.mutation.SecretsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.SecretsTable,
			Columns: []string{project.SecretsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(secret.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SecretsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.SecretsTable,
			Columns: []string{project.SecretsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(secret.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.TypescriptTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.TypescriptTypesTable,
			Columns: []string{project.TypescriptTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(typescripttype.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedTypescriptTypesIDs(); len(nodes) > 0 && !puo.mutation.TypescriptTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.TypescriptTypesTable,
			Columns: []string{project.TypescriptTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(typescripttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TypescriptTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.TypescriptTypesTable,
			Columns: []string{project.TypescriptTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(typescripttype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.FunctionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.FunctionsTable,
			Columns: []string{project.FunctionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(function.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedFunctionsIDs(); len(nodes) > 0 && !puo.mutation.FunctionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.FunctionsTable,
			Columns: []string{project.FunctionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(function.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FunctionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.FunctionsTable,
			Columns: []string{project.FunctionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(function.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CustomHostnamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.CustomHostnamesTable,
			Columns: []string{project.CustomHostnamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customhostname.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCustomHostnamesIDs(); len(nodes) > 0 && !puo.mutation.CustomHostnamesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.CustomHostnamesTable,
			Columns: []string{project.CustomHostnamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customhostname.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CustomHostnamesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.CustomHostnamesTable,
			Columns: []string{project.CustomHostnamesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customhostname.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PgsodiumConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.PgsodiumConfigsTable,
			Columns: []string{project.PgsodiumConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pgsodiumconfig.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPgsodiumConfigsIDs(); len(nodes) > 0 && !puo.mutation.PgsodiumConfigsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.PgsodiumConfigsTable,
			Columns: []string{project.PgsodiumConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pgsodiumconfig.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PgsodiumConfigsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.PgsodiumConfigsTable,
			Columns: []string{project.PgsodiumConfigsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pgsodiumconfig.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.NetworkBansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.NetworkBansTable,
			Columns: []string{project.NetworkBansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(networkban.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedNetworkBansIDs(); len(nodes) > 0 && !puo.mutation.NetworkBansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.NetworkBansTable,
			Columns: []string{project.NetworkBansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(networkban.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.NetworkBansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.NetworkBansTable,
			Columns: []string{project.NetworkBansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(networkban.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.BranchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.BranchesTable,
			Columns: []string{project.BranchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedBranchesIDs(); len(nodes) > 0 && !puo.mutation.BranchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.BranchesTable,
			Columns: []string{project.BranchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BranchesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.BranchesTable,
			Columns: []string{project.BranchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ChildBranchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ChildBranchesTable,
			Columns: []string{project.ChildBranchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedChildBranchesIDs(); len(nodes) > 0 && !puo.mutation.ChildBranchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ChildBranchesTable,
			Columns: []string{project.ChildBranchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ChildBranchesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.ChildBranchesTable,
			Columns: []string{project.ChildBranchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.AuthConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   project.AuthConfigTable,
			Columns: []string{project.AuthConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authconfig.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AuthConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   project.AuthConfigTable,
			Columns: []string{project.AuthConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authconfig.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Project{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
