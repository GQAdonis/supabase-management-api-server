// Code generated by ent, DO NOT EDIT.

package provider

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"tribemedia.io/m/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Provider {
	return predicate.Provider(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Provider {
	return predicate.Provider(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Provider {
	return predicate.Provider(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Provider {
	return predicate.Provider(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Provider {
	return predicate.Provider(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Provider {
	return predicate.Provider(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Provider {
	return predicate.Provider(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Provider {
	return predicate.Provider(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Provider {
	return predicate.Provider(sql.FieldLTE(FieldID, id))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Provider {
	return predicate.Provider(sql.FieldEQ(FieldType, v))
}

// MetadataXML applies equality check predicate on the "metadata_xml" field. It's identical to MetadataXMLEQ.
func MetadataXML(v string) predicate.Provider {
	return predicate.Provider(sql.FieldEQ(FieldMetadataXML, v))
}

// MetadataURL applies equality check predicate on the "metadata_url" field. It's identical to MetadataURLEQ.
func MetadataURL(v string) predicate.Provider {
	return predicate.Provider(sql.FieldEQ(FieldMetadataURL, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Provider {
	return predicate.Provider(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Provider {
	return predicate.Provider(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Provider {
	return predicate.Provider(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Provider {
	return predicate.Provider(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Provider {
	return predicate.Provider(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Provider {
	return predicate.Provider(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Provider {
	return predicate.Provider(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Provider {
	return predicate.Provider(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Provider {
	return predicate.Provider(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Provider {
	return predicate.Provider(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Provider {
	return predicate.Provider(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Provider {
	return predicate.Provider(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Provider {
	return predicate.Provider(sql.FieldContainsFold(FieldType, v))
}

// MetadataXMLEQ applies the EQ predicate on the "metadata_xml" field.
func MetadataXMLEQ(v string) predicate.Provider {
	return predicate.Provider(sql.FieldEQ(FieldMetadataXML, v))
}

// MetadataXMLNEQ applies the NEQ predicate on the "metadata_xml" field.
func MetadataXMLNEQ(v string) predicate.Provider {
	return predicate.Provider(sql.FieldNEQ(FieldMetadataXML, v))
}

// MetadataXMLIn applies the In predicate on the "metadata_xml" field.
func MetadataXMLIn(vs ...string) predicate.Provider {
	return predicate.Provider(sql.FieldIn(FieldMetadataXML, vs...))
}

// MetadataXMLNotIn applies the NotIn predicate on the "metadata_xml" field.
func MetadataXMLNotIn(vs ...string) predicate.Provider {
	return predicate.Provider(sql.FieldNotIn(FieldMetadataXML, vs...))
}

// MetadataXMLGT applies the GT predicate on the "metadata_xml" field.
func MetadataXMLGT(v string) predicate.Provider {
	return predicate.Provider(sql.FieldGT(FieldMetadataXML, v))
}

// MetadataXMLGTE applies the GTE predicate on the "metadata_xml" field.
func MetadataXMLGTE(v string) predicate.Provider {
	return predicate.Provider(sql.FieldGTE(FieldMetadataXML, v))
}

// MetadataXMLLT applies the LT predicate on the "metadata_xml" field.
func MetadataXMLLT(v string) predicate.Provider {
	return predicate.Provider(sql.FieldLT(FieldMetadataXML, v))
}

// MetadataXMLLTE applies the LTE predicate on the "metadata_xml" field.
func MetadataXMLLTE(v string) predicate.Provider {
	return predicate.Provider(sql.FieldLTE(FieldMetadataXML, v))
}

// MetadataXMLContains applies the Contains predicate on the "metadata_xml" field.
func MetadataXMLContains(v string) predicate.Provider {
	return predicate.Provider(sql.FieldContains(FieldMetadataXML, v))
}

// MetadataXMLHasPrefix applies the HasPrefix predicate on the "metadata_xml" field.
func MetadataXMLHasPrefix(v string) predicate.Provider {
	return predicate.Provider(sql.FieldHasPrefix(FieldMetadataXML, v))
}

// MetadataXMLHasSuffix applies the HasSuffix predicate on the "metadata_xml" field.
func MetadataXMLHasSuffix(v string) predicate.Provider {
	return predicate.Provider(sql.FieldHasSuffix(FieldMetadataXML, v))
}

// MetadataXMLIsNil applies the IsNil predicate on the "metadata_xml" field.
func MetadataXMLIsNil() predicate.Provider {
	return predicate.Provider(sql.FieldIsNull(FieldMetadataXML))
}

// MetadataXMLNotNil applies the NotNil predicate on the "metadata_xml" field.
func MetadataXMLNotNil() predicate.Provider {
	return predicate.Provider(sql.FieldNotNull(FieldMetadataXML))
}

// MetadataXMLEqualFold applies the EqualFold predicate on the "metadata_xml" field.
func MetadataXMLEqualFold(v string) predicate.Provider {
	return predicate.Provider(sql.FieldEqualFold(FieldMetadataXML, v))
}

// MetadataXMLContainsFold applies the ContainsFold predicate on the "metadata_xml" field.
func MetadataXMLContainsFold(v string) predicate.Provider {
	return predicate.Provider(sql.FieldContainsFold(FieldMetadataXML, v))
}

// MetadataURLEQ applies the EQ predicate on the "metadata_url" field.
func MetadataURLEQ(v string) predicate.Provider {
	return predicate.Provider(sql.FieldEQ(FieldMetadataURL, v))
}

// MetadataURLNEQ applies the NEQ predicate on the "metadata_url" field.
func MetadataURLNEQ(v string) predicate.Provider {
	return predicate.Provider(sql.FieldNEQ(FieldMetadataURL, v))
}

// MetadataURLIn applies the In predicate on the "metadata_url" field.
func MetadataURLIn(vs ...string) predicate.Provider {
	return predicate.Provider(sql.FieldIn(FieldMetadataURL, vs...))
}

// MetadataURLNotIn applies the NotIn predicate on the "metadata_url" field.
func MetadataURLNotIn(vs ...string) predicate.Provider {
	return predicate.Provider(sql.FieldNotIn(FieldMetadataURL, vs...))
}

// MetadataURLGT applies the GT predicate on the "metadata_url" field.
func MetadataURLGT(v string) predicate.Provider {
	return predicate.Provider(sql.FieldGT(FieldMetadataURL, v))
}

// MetadataURLGTE applies the GTE predicate on the "metadata_url" field.
func MetadataURLGTE(v string) predicate.Provider {
	return predicate.Provider(sql.FieldGTE(FieldMetadataURL, v))
}

// MetadataURLLT applies the LT predicate on the "metadata_url" field.
func MetadataURLLT(v string) predicate.Provider {
	return predicate.Provider(sql.FieldLT(FieldMetadataURL, v))
}

// MetadataURLLTE applies the LTE predicate on the "metadata_url" field.
func MetadataURLLTE(v string) predicate.Provider {
	return predicate.Provider(sql.FieldLTE(FieldMetadataURL, v))
}

// MetadataURLContains applies the Contains predicate on the "metadata_url" field.
func MetadataURLContains(v string) predicate.Provider {
	return predicate.Provider(sql.FieldContains(FieldMetadataURL, v))
}

// MetadataURLHasPrefix applies the HasPrefix predicate on the "metadata_url" field.
func MetadataURLHasPrefix(v string) predicate.Provider {
	return predicate.Provider(sql.FieldHasPrefix(FieldMetadataURL, v))
}

// MetadataURLHasSuffix applies the HasSuffix predicate on the "metadata_url" field.
func MetadataURLHasSuffix(v string) predicate.Provider {
	return predicate.Provider(sql.FieldHasSuffix(FieldMetadataURL, v))
}

// MetadataURLIsNil applies the IsNil predicate on the "metadata_url" field.
func MetadataURLIsNil() predicate.Provider {
	return predicate.Provider(sql.FieldIsNull(FieldMetadataURL))
}

// MetadataURLNotNil applies the NotNil predicate on the "metadata_url" field.
func MetadataURLNotNil() predicate.Provider {
	return predicate.Provider(sql.FieldNotNull(FieldMetadataURL))
}

// MetadataURLEqualFold applies the EqualFold predicate on the "metadata_url" field.
func MetadataURLEqualFold(v string) predicate.Provider {
	return predicate.Provider(sql.FieldEqualFold(FieldMetadataURL, v))
}

// MetadataURLContainsFold applies the ContainsFold predicate on the "metadata_url" field.
func MetadataURLContainsFold(v string) predicate.Provider {
	return predicate.Provider(sql.FieldContainsFold(FieldMetadataURL, v))
}

// AttributeMappingIsNil applies the IsNil predicate on the "attribute_mapping" field.
func AttributeMappingIsNil() predicate.Provider {
	return predicate.Provider(sql.FieldIsNull(FieldAttributeMapping))
}

// AttributeMappingNotNil applies the NotNil predicate on the "attribute_mapping" field.
func AttributeMappingNotNil() predicate.Provider {
	return predicate.Provider(sql.FieldNotNull(FieldAttributeMapping))
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.Provider {
	return predicate.Provider(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Provider) predicate.Provider {
	return predicate.Provider(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Provider) predicate.Provider {
	return predicate.Provider(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Provider) predicate.Provider {
	return predicate.Provider(sql.NotPredicates(p))
}
