// Code generated by ent, DO NOT EDIT.

package thirdpartyauth

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the thirdpartyauth type in the database.
	Label = "third_party_auth"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOidcIssuerURL holds the string denoting the oidc_issuer_url field in the database.
	FieldOidcIssuerURL = "oidc_issuer_url"
	// FieldJwksURL holds the string denoting the jwks_url field in the database.
	FieldJwksURL = "jwks_url"
	// FieldCustomJwks holds the string denoting the custom_jwks field in the database.
	FieldCustomJwks = "custom_jwks"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// Table holds the table name of the thirdpartyauth in the database.
	Table = "third_party_auths"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "third_party_auths"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_third_party_auths"
)

// Columns holds all SQL columns for thirdpartyauth fields.
var Columns = []string{
	FieldID,
	FieldOidcIssuerURL,
	FieldJwksURL,
	FieldCustomJwks,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "third_party_auths"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"organization_third_party_auths",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ThirdPartyAuth queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOidcIssuerURL orders the results by the oidc_issuer_url field.
func ByOidcIssuerURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOidcIssuerURL, opts...).ToFunc()
}

// ByJwksURL orders the results by the jwks_url field.
func ByJwksURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJwksURL, opts...).ToFunc()
}

// ByOrganizationField orders the results by organization field.
func ByOrganizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), sql.OrderByField(field, opts...))
	}
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OrganizationTable, OrganizationColumn),
	)
}
