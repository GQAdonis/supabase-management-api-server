// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"tribemedia.io/m/ent/function"
	"tribemedia.io/m/ent/project"
)

// Function is the model entity for the Function schema.
type Function struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// The ID of the project this function belongs to
	ProjectID uuid.UUID `json:"project_id,omitempty"`
	// The name of the function
	Name string `json:"name,omitempty"`
	// The runtime of the function
	Runtime string `json:"runtime,omitempty"`
	// The source code of the function
	SourceCode string `json:"-"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FunctionQuery when eager-loading is set.
	Edges        FunctionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FunctionEdges holds the relations/edges for other nodes in the graph.
type FunctionEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FunctionEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Function) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case function.FieldName, function.FieldRuntime, function.FieldSourceCode:
			values[i] = new(sql.NullString)
		case function.FieldID, function.FieldProjectID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Function fields.
func (f *Function) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case function.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				f.ID = *value
			}
		case function.FieldProjectID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value != nil {
				f.ProjectID = *value
			}
		case function.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				f.Name = value.String
			}
		case function.FieldRuntime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field runtime", values[i])
			} else if value.Valid {
				f.Runtime = value.String
			}
		case function.FieldSourceCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_code", values[i])
			} else if value.Valid {
				f.SourceCode = value.String
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Function.
// This includes values selected through modifiers, order, etc.
func (f *Function) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the Function entity.
func (f *Function) QueryProject() *ProjectQuery {
	return NewFunctionClient(f.config).QueryProject(f)
}

// Update returns a builder for updating this Function.
// Note that you need to call Function.Unwrap() before calling this method if this Function
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Function) Update() *FunctionUpdateOne {
	return NewFunctionClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Function entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Function) Unwrap() *Function {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Function is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Function) String() string {
	var builder strings.Builder
	builder.WriteString("Function(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("project_id=")
	builder.WriteString(fmt.Sprintf("%v", f.ProjectID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(f.Name)
	builder.WriteString(", ")
	builder.WriteString("runtime=")
	builder.WriteString(f.Runtime)
	builder.WriteString(", ")
	builder.WriteString("source_code=<sensitive>")
	builder.WriteByte(')')
	return builder.String()
}

// Functions is a parsable slice of Function.
type Functions []*Function
