// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"tribemedia.io/m/ent/authconfig"
	"tribemedia.io/m/ent/project"
)

// Project is the model entity for the Project schema.
type Project struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectQuery when eager-loading is set.
	Edges        ProjectEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProjectEdges holds the relations/edges for other nodes in the graph.
type ProjectEdges struct {
	// Secrets holds the value of the secrets edge.
	Secrets []*Secret `json:"secrets,omitempty"`
	// TypescriptTypes holds the value of the typescriptTypes edge.
	TypescriptTypes []*TypeScriptType `json:"typescriptTypes,omitempty"`
	// Functions holds the value of the functions edge.
	Functions []*Function `json:"functions,omitempty"`
	// CustomHostnames holds the value of the customHostnames edge.
	CustomHostnames []*CustomHostname `json:"customHostnames,omitempty"`
	// PgsodiumConfigs holds the value of the pgsodiumConfigs edge.
	PgsodiumConfigs []*PgsodiumConfig `json:"pgsodiumConfigs,omitempty"`
	// NetworkBans holds the value of the networkBans edge.
	NetworkBans []*NetworkBan `json:"networkBans,omitempty"`
	// Branches holds the value of the branches edge.
	Branches []*Branch `json:"branches,omitempty"`
	// ChildBranches holds the value of the childBranches edge.
	ChildBranches []*Branch `json:"childBranches,omitempty"`
	// AuthConfig holds the value of the auth_config edge.
	AuthConfig *AuthConfig `json:"auth_config,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
}

// SecretsOrErr returns the Secrets value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) SecretsOrErr() ([]*Secret, error) {
	if e.loadedTypes[0] {
		return e.Secrets, nil
	}
	return nil, &NotLoadedError{edge: "secrets"}
}

// TypescriptTypesOrErr returns the TypescriptTypes value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) TypescriptTypesOrErr() ([]*TypeScriptType, error) {
	if e.loadedTypes[1] {
		return e.TypescriptTypes, nil
	}
	return nil, &NotLoadedError{edge: "typescriptTypes"}
}

// FunctionsOrErr returns the Functions value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) FunctionsOrErr() ([]*Function, error) {
	if e.loadedTypes[2] {
		return e.Functions, nil
	}
	return nil, &NotLoadedError{edge: "functions"}
}

// CustomHostnamesOrErr returns the CustomHostnames value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) CustomHostnamesOrErr() ([]*CustomHostname, error) {
	if e.loadedTypes[3] {
		return e.CustomHostnames, nil
	}
	return nil, &NotLoadedError{edge: "customHostnames"}
}

// PgsodiumConfigsOrErr returns the PgsodiumConfigs value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) PgsodiumConfigsOrErr() ([]*PgsodiumConfig, error) {
	if e.loadedTypes[4] {
		return e.PgsodiumConfigs, nil
	}
	return nil, &NotLoadedError{edge: "pgsodiumConfigs"}
}

// NetworkBansOrErr returns the NetworkBans value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) NetworkBansOrErr() ([]*NetworkBan, error) {
	if e.loadedTypes[5] {
		return e.NetworkBans, nil
	}
	return nil, &NotLoadedError{edge: "networkBans"}
}

// BranchesOrErr returns the Branches value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) BranchesOrErr() ([]*Branch, error) {
	if e.loadedTypes[6] {
		return e.Branches, nil
	}
	return nil, &NotLoadedError{edge: "branches"}
}

// ChildBranchesOrErr returns the ChildBranches value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) ChildBranchesOrErr() ([]*Branch, error) {
	if e.loadedTypes[7] {
		return e.ChildBranches, nil
	}
	return nil, &NotLoadedError{edge: "childBranches"}
}

// AuthConfigOrErr returns the AuthConfig value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectEdges) AuthConfigOrErr() (*AuthConfig, error) {
	if e.AuthConfig != nil {
		return e.AuthConfig, nil
	} else if e.loadedTypes[8] {
		return nil, &NotFoundError{label: authconfig.Label}
	}
	return nil, &NotLoadedError{edge: "auth_config"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Project) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case project.FieldName:
			values[i] = new(sql.NullString)
		case project.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Project fields.
func (pr *Project) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case project.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pr.ID = *value
			}
		case project.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Project.
// This includes values selected through modifiers, order, etc.
func (pr *Project) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QuerySecrets queries the "secrets" edge of the Project entity.
func (pr *Project) QuerySecrets() *SecretQuery {
	return NewProjectClient(pr.config).QuerySecrets(pr)
}

// QueryTypescriptTypes queries the "typescriptTypes" edge of the Project entity.
func (pr *Project) QueryTypescriptTypes() *TypeScriptTypeQuery {
	return NewProjectClient(pr.config).QueryTypescriptTypes(pr)
}

// QueryFunctions queries the "functions" edge of the Project entity.
func (pr *Project) QueryFunctions() *FunctionQuery {
	return NewProjectClient(pr.config).QueryFunctions(pr)
}

// QueryCustomHostnames queries the "customHostnames" edge of the Project entity.
func (pr *Project) QueryCustomHostnames() *CustomHostnameQuery {
	return NewProjectClient(pr.config).QueryCustomHostnames(pr)
}

// QueryPgsodiumConfigs queries the "pgsodiumConfigs" edge of the Project entity.
func (pr *Project) QueryPgsodiumConfigs() *PgsodiumConfigQuery {
	return NewProjectClient(pr.config).QueryPgsodiumConfigs(pr)
}

// QueryNetworkBans queries the "networkBans" edge of the Project entity.
func (pr *Project) QueryNetworkBans() *NetworkBanQuery {
	return NewProjectClient(pr.config).QueryNetworkBans(pr)
}

// QueryBranches queries the "branches" edge of the Project entity.
func (pr *Project) QueryBranches() *BranchQuery {
	return NewProjectClient(pr.config).QueryBranches(pr)
}

// QueryChildBranches queries the "childBranches" edge of the Project entity.
func (pr *Project) QueryChildBranches() *BranchQuery {
	return NewProjectClient(pr.config).QueryChildBranches(pr)
}

// QueryAuthConfig queries the "auth_config" edge of the Project entity.
func (pr *Project) QueryAuthConfig() *AuthConfigQuery {
	return NewProjectClient(pr.config).QueryAuthConfig(pr)
}

// Update returns a builder for updating this Project.
// Note that you need to call Project.Unwrap() before calling this method if this Project
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Project) Update() *ProjectUpdateOne {
	return NewProjectClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Project entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Project) Unwrap() *Project {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Project is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Project) String() string {
	var builder strings.Builder
	builder.WriteString("Project(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Projects is a parsable slice of Project.
type Projects []*Project
