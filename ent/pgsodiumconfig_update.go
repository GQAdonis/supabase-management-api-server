// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"tribemedia.io/m/ent/pgsodiumconfig"
	"tribemedia.io/m/ent/predicate"
	"tribemedia.io/m/ent/project"
)

// PgsodiumConfigUpdate is the builder for updating PgsodiumConfig entities.
type PgsodiumConfigUpdate struct {
	config
	hooks    []Hook
	mutation *PgsodiumConfigMutation
}

// Where appends a list predicates to the PgsodiumConfigUpdate builder.
func (pcu *PgsodiumConfigUpdate) Where(ps ...predicate.PgsodiumConfig) *PgsodiumConfigUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetProjectID sets the "project_id" field.
func (pcu *PgsodiumConfigUpdate) SetProjectID(u uuid.UUID) *PgsodiumConfigUpdate {
	pcu.mutation.SetProjectID(u)
	return pcu
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (pcu *PgsodiumConfigUpdate) SetNillableProjectID(u *uuid.UUID) *PgsodiumConfigUpdate {
	if u != nil {
		pcu.SetProjectID(*u)
	}
	return pcu
}

// SetEnabled sets the "enabled" field.
func (pcu *PgsodiumConfigUpdate) SetEnabled(b bool) *PgsodiumConfigUpdate {
	pcu.mutation.SetEnabled(b)
	return pcu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (pcu *PgsodiumConfigUpdate) SetNillableEnabled(b *bool) *PgsodiumConfigUpdate {
	if b != nil {
		pcu.SetEnabled(*b)
	}
	return pcu
}

// SetProject sets the "project" edge to the Project entity.
func (pcu *PgsodiumConfigUpdate) SetProject(p *Project) *PgsodiumConfigUpdate {
	return pcu.SetProjectID(p.ID)
}

// Mutation returns the PgsodiumConfigMutation object of the builder.
func (pcu *PgsodiumConfigUpdate) Mutation() *PgsodiumConfigMutation {
	return pcu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (pcu *PgsodiumConfigUpdate) ClearProject() *PgsodiumConfigUpdate {
	pcu.mutation.ClearProject()
	return pcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *PgsodiumConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pcu.sqlSave, pcu.mutation, pcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *PgsodiumConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *PgsodiumConfigUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *PgsodiumConfigUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcu *PgsodiumConfigUpdate) check() error {
	if _, ok := pcu.mutation.ProjectID(); pcu.mutation.ProjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PgsodiumConfig.project"`)
	}
	return nil
}

func (pcu *PgsodiumConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(pgsodiumconfig.Table, pgsodiumconfig.Columns, sqlgraph.NewFieldSpec(pgsodiumconfig.FieldID, field.TypeUUID))
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.Enabled(); ok {
		_spec.SetField(pgsodiumconfig.FieldEnabled, field.TypeBool, value)
	}
	if pcu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pgsodiumconfig.ProjectTable,
			Columns: []string{pgsodiumconfig.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pgsodiumconfig.ProjectTable,
			Columns: []string{pgsodiumconfig.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pgsodiumconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcu.mutation.done = true
	return n, nil
}

// PgsodiumConfigUpdateOne is the builder for updating a single PgsodiumConfig entity.
type PgsodiumConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PgsodiumConfigMutation
}

// SetProjectID sets the "project_id" field.
func (pcuo *PgsodiumConfigUpdateOne) SetProjectID(u uuid.UUID) *PgsodiumConfigUpdateOne {
	pcuo.mutation.SetProjectID(u)
	return pcuo
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (pcuo *PgsodiumConfigUpdateOne) SetNillableProjectID(u *uuid.UUID) *PgsodiumConfigUpdateOne {
	if u != nil {
		pcuo.SetProjectID(*u)
	}
	return pcuo
}

// SetEnabled sets the "enabled" field.
func (pcuo *PgsodiumConfigUpdateOne) SetEnabled(b bool) *PgsodiumConfigUpdateOne {
	pcuo.mutation.SetEnabled(b)
	return pcuo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (pcuo *PgsodiumConfigUpdateOne) SetNillableEnabled(b *bool) *PgsodiumConfigUpdateOne {
	if b != nil {
		pcuo.SetEnabled(*b)
	}
	return pcuo
}

// SetProject sets the "project" edge to the Project entity.
func (pcuo *PgsodiumConfigUpdateOne) SetProject(p *Project) *PgsodiumConfigUpdateOne {
	return pcuo.SetProjectID(p.ID)
}

// Mutation returns the PgsodiumConfigMutation object of the builder.
func (pcuo *PgsodiumConfigUpdateOne) Mutation() *PgsodiumConfigMutation {
	return pcuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (pcuo *PgsodiumConfigUpdateOne) ClearProject() *PgsodiumConfigUpdateOne {
	pcuo.mutation.ClearProject()
	return pcuo
}

// Where appends a list predicates to the PgsodiumConfigUpdate builder.
func (pcuo *PgsodiumConfigUpdateOne) Where(ps ...predicate.PgsodiumConfig) *PgsodiumConfigUpdateOne {
	pcuo.mutation.Where(ps...)
	return pcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *PgsodiumConfigUpdateOne) Select(field string, fields ...string) *PgsodiumConfigUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated PgsodiumConfig entity.
func (pcuo *PgsodiumConfigUpdateOne) Save(ctx context.Context) (*PgsodiumConfig, error) {
	return withHooks(ctx, pcuo.sqlSave, pcuo.mutation, pcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *PgsodiumConfigUpdateOne) SaveX(ctx context.Context) *PgsodiumConfig {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *PgsodiumConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *PgsodiumConfigUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcuo *PgsodiumConfigUpdateOne) check() error {
	if _, ok := pcuo.mutation.ProjectID(); pcuo.mutation.ProjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PgsodiumConfig.project"`)
	}
	return nil
}

func (pcuo *PgsodiumConfigUpdateOne) sqlSave(ctx context.Context) (_node *PgsodiumConfig, err error) {
	if err := pcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(pgsodiumconfig.Table, pgsodiumconfig.Columns, sqlgraph.NewFieldSpec(pgsodiumconfig.FieldID, field.TypeUUID))
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PgsodiumConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pgsodiumconfig.FieldID)
		for _, f := range fields {
			if !pgsodiumconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pgsodiumconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.Enabled(); ok {
		_spec.SetField(pgsodiumconfig.FieldEnabled, field.TypeBool, value)
	}
	if pcuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pgsodiumconfig.ProjectTable,
			Columns: []string{pgsodiumconfig.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pgsodiumconfig.ProjectTable,
			Columns: []string{pgsodiumconfig.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PgsodiumConfig{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pgsodiumconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcuo.mutation.done = true
	return _node, nil
}
