// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"tribemedia.io/m/ent/networkban"
	"tribemedia.io/m/ent/predicate"
	"tribemedia.io/m/ent/project"
)

// NetworkBanUpdate is the builder for updating NetworkBan entities.
type NetworkBanUpdate struct {
	config
	hooks    []Hook
	mutation *NetworkBanMutation
}

// Where appends a list predicates to the NetworkBanUpdate builder.
func (nbu *NetworkBanUpdate) Where(ps ...predicate.NetworkBan) *NetworkBanUpdate {
	nbu.mutation.Where(ps...)
	return nbu
}

// SetProjectID sets the "project_id" field.
func (nbu *NetworkBanUpdate) SetProjectID(u uuid.UUID) *NetworkBanUpdate {
	nbu.mutation.SetProjectID(u)
	return nbu
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (nbu *NetworkBanUpdate) SetNillableProjectID(u *uuid.UUID) *NetworkBanUpdate {
	if u != nil {
		nbu.SetProjectID(*u)
	}
	return nbu
}

// SetIPAddress sets the "ip_address" field.
func (nbu *NetworkBanUpdate) SetIPAddress(s string) *NetworkBanUpdate {
	nbu.mutation.SetIPAddress(s)
	return nbu
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (nbu *NetworkBanUpdate) SetNillableIPAddress(s *string) *NetworkBanUpdate {
	if s != nil {
		nbu.SetIPAddress(*s)
	}
	return nbu
}

// SetReason sets the "reason" field.
func (nbu *NetworkBanUpdate) SetReason(s string) *NetworkBanUpdate {
	nbu.mutation.SetReason(s)
	return nbu
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (nbu *NetworkBanUpdate) SetNillableReason(s *string) *NetworkBanUpdate {
	if s != nil {
		nbu.SetReason(*s)
	}
	return nbu
}

// ClearReason clears the value of the "reason" field.
func (nbu *NetworkBanUpdate) ClearReason() *NetworkBanUpdate {
	nbu.mutation.ClearReason()
	return nbu
}

// SetCreatedAt sets the "created_at" field.
func (nbu *NetworkBanUpdate) SetCreatedAt(t time.Time) *NetworkBanUpdate {
	nbu.mutation.SetCreatedAt(t)
	return nbu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nbu *NetworkBanUpdate) SetNillableCreatedAt(t *time.Time) *NetworkBanUpdate {
	if t != nil {
		nbu.SetCreatedAt(*t)
	}
	return nbu
}

// SetProject sets the "project" edge to the Project entity.
func (nbu *NetworkBanUpdate) SetProject(p *Project) *NetworkBanUpdate {
	return nbu.SetProjectID(p.ID)
}

// Mutation returns the NetworkBanMutation object of the builder.
func (nbu *NetworkBanUpdate) Mutation() *NetworkBanMutation {
	return nbu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (nbu *NetworkBanUpdate) ClearProject() *NetworkBanUpdate {
	nbu.mutation.ClearProject()
	return nbu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nbu *NetworkBanUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nbu.sqlSave, nbu.mutation, nbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nbu *NetworkBanUpdate) SaveX(ctx context.Context) int {
	affected, err := nbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nbu *NetworkBanUpdate) Exec(ctx context.Context) error {
	_, err := nbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nbu *NetworkBanUpdate) ExecX(ctx context.Context) {
	if err := nbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nbu *NetworkBanUpdate) check() error {
	if _, ok := nbu.mutation.ProjectID(); nbu.mutation.ProjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "NetworkBan.project"`)
	}
	return nil
}

func (nbu *NetworkBanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nbu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(networkban.Table, networkban.Columns, sqlgraph.NewFieldSpec(networkban.FieldID, field.TypeUUID))
	if ps := nbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nbu.mutation.IPAddress(); ok {
		_spec.SetField(networkban.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := nbu.mutation.Reason(); ok {
		_spec.SetField(networkban.FieldReason, field.TypeString, value)
	}
	if nbu.mutation.ReasonCleared() {
		_spec.ClearField(networkban.FieldReason, field.TypeString)
	}
	if value, ok := nbu.mutation.CreatedAt(); ok {
		_spec.SetField(networkban.FieldCreatedAt, field.TypeTime, value)
	}
	if nbu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   networkban.ProjectTable,
			Columns: []string{networkban.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nbu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   networkban.ProjectTable,
			Columns: []string{networkban.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{networkban.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nbu.mutation.done = true
	return n, nil
}

// NetworkBanUpdateOne is the builder for updating a single NetworkBan entity.
type NetworkBanUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NetworkBanMutation
}

// SetProjectID sets the "project_id" field.
func (nbuo *NetworkBanUpdateOne) SetProjectID(u uuid.UUID) *NetworkBanUpdateOne {
	nbuo.mutation.SetProjectID(u)
	return nbuo
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (nbuo *NetworkBanUpdateOne) SetNillableProjectID(u *uuid.UUID) *NetworkBanUpdateOne {
	if u != nil {
		nbuo.SetProjectID(*u)
	}
	return nbuo
}

// SetIPAddress sets the "ip_address" field.
func (nbuo *NetworkBanUpdateOne) SetIPAddress(s string) *NetworkBanUpdateOne {
	nbuo.mutation.SetIPAddress(s)
	return nbuo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (nbuo *NetworkBanUpdateOne) SetNillableIPAddress(s *string) *NetworkBanUpdateOne {
	if s != nil {
		nbuo.SetIPAddress(*s)
	}
	return nbuo
}

// SetReason sets the "reason" field.
func (nbuo *NetworkBanUpdateOne) SetReason(s string) *NetworkBanUpdateOne {
	nbuo.mutation.SetReason(s)
	return nbuo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (nbuo *NetworkBanUpdateOne) SetNillableReason(s *string) *NetworkBanUpdateOne {
	if s != nil {
		nbuo.SetReason(*s)
	}
	return nbuo
}

// ClearReason clears the value of the "reason" field.
func (nbuo *NetworkBanUpdateOne) ClearReason() *NetworkBanUpdateOne {
	nbuo.mutation.ClearReason()
	return nbuo
}

// SetCreatedAt sets the "created_at" field.
func (nbuo *NetworkBanUpdateOne) SetCreatedAt(t time.Time) *NetworkBanUpdateOne {
	nbuo.mutation.SetCreatedAt(t)
	return nbuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nbuo *NetworkBanUpdateOne) SetNillableCreatedAt(t *time.Time) *NetworkBanUpdateOne {
	if t != nil {
		nbuo.SetCreatedAt(*t)
	}
	return nbuo
}

// SetProject sets the "project" edge to the Project entity.
func (nbuo *NetworkBanUpdateOne) SetProject(p *Project) *NetworkBanUpdateOne {
	return nbuo.SetProjectID(p.ID)
}

// Mutation returns the NetworkBanMutation object of the builder.
func (nbuo *NetworkBanUpdateOne) Mutation() *NetworkBanMutation {
	return nbuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (nbuo *NetworkBanUpdateOne) ClearProject() *NetworkBanUpdateOne {
	nbuo.mutation.ClearProject()
	return nbuo
}

// Where appends a list predicates to the NetworkBanUpdate builder.
func (nbuo *NetworkBanUpdateOne) Where(ps ...predicate.NetworkBan) *NetworkBanUpdateOne {
	nbuo.mutation.Where(ps...)
	return nbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nbuo *NetworkBanUpdateOne) Select(field string, fields ...string) *NetworkBanUpdateOne {
	nbuo.fields = append([]string{field}, fields...)
	return nbuo
}

// Save executes the query and returns the updated NetworkBan entity.
func (nbuo *NetworkBanUpdateOne) Save(ctx context.Context) (*NetworkBan, error) {
	return withHooks(ctx, nbuo.sqlSave, nbuo.mutation, nbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nbuo *NetworkBanUpdateOne) SaveX(ctx context.Context) *NetworkBan {
	node, err := nbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nbuo *NetworkBanUpdateOne) Exec(ctx context.Context) error {
	_, err := nbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nbuo *NetworkBanUpdateOne) ExecX(ctx context.Context) {
	if err := nbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nbuo *NetworkBanUpdateOne) check() error {
	if _, ok := nbuo.mutation.ProjectID(); nbuo.mutation.ProjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "NetworkBan.project"`)
	}
	return nil
}

func (nbuo *NetworkBanUpdateOne) sqlSave(ctx context.Context) (_node *NetworkBan, err error) {
	if err := nbuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(networkban.Table, networkban.Columns, sqlgraph.NewFieldSpec(networkban.FieldID, field.TypeUUID))
	id, ok := nbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NetworkBan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, networkban.FieldID)
		for _, f := range fields {
			if !networkban.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != networkban.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nbuo.mutation.IPAddress(); ok {
		_spec.SetField(networkban.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := nbuo.mutation.Reason(); ok {
		_spec.SetField(networkban.FieldReason, field.TypeString, value)
	}
	if nbuo.mutation.ReasonCleared() {
		_spec.ClearField(networkban.FieldReason, field.TypeString)
	}
	if value, ok := nbuo.mutation.CreatedAt(); ok {
		_spec.SetField(networkban.FieldCreatedAt, field.TypeTime, value)
	}
	if nbuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   networkban.ProjectTable,
			Columns: []string{networkban.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nbuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   networkban.ProjectTable,
			Columns: []string{networkban.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NetworkBan{config: nbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{networkban.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nbuo.mutation.done = true
	return _node, nil
}
