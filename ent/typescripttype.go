// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"tribemedia.io/m/ent/project"
	"tribemedia.io/m/ent/typescripttype"
)

// TypeScriptType is the model entity for the TypeScriptType schema.
type TypeScriptType struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// The ID of the project this TypeScript type belongs to
	ProjectID uuid.UUID `json:"project_id,omitempty"`
	// The name of the TypeScript type
	Name string `json:"name,omitempty"`
	// The TypeScript type definition
	Definition string `json:"definition,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TypeScriptTypeQuery when eager-loading is set.
	Edges        TypeScriptTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TypeScriptTypeEdges holds the relations/edges for other nodes in the graph.
type TypeScriptTypeEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TypeScriptTypeEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TypeScriptType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case typescripttype.FieldName, typescripttype.FieldDefinition:
			values[i] = new(sql.NullString)
		case typescripttype.FieldID, typescripttype.FieldProjectID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TypeScriptType fields.
func (tst *TypeScriptType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case typescripttype.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tst.ID = *value
			}
		case typescripttype.FieldProjectID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value != nil {
				tst.ProjectID = *value
			}
		case typescripttype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tst.Name = value.String
			}
		case typescripttype.FieldDefinition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field definition", values[i])
			} else if value.Valid {
				tst.Definition = value.String
			}
		default:
			tst.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TypeScriptType.
// This includes values selected through modifiers, order, etc.
func (tst *TypeScriptType) Value(name string) (ent.Value, error) {
	return tst.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the TypeScriptType entity.
func (tst *TypeScriptType) QueryProject() *ProjectQuery {
	return NewTypeScriptTypeClient(tst.config).QueryProject(tst)
}

// Update returns a builder for updating this TypeScriptType.
// Note that you need to call TypeScriptType.Unwrap() before calling this method if this TypeScriptType
// was returned from a transaction, and the transaction was committed or rolled back.
func (tst *TypeScriptType) Update() *TypeScriptTypeUpdateOne {
	return NewTypeScriptTypeClient(tst.config).UpdateOne(tst)
}

// Unwrap unwraps the TypeScriptType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tst *TypeScriptType) Unwrap() *TypeScriptType {
	_tx, ok := tst.config.driver.(*txDriver)
	if !ok {
		panic("ent: TypeScriptType is not a transactional entity")
	}
	tst.config.driver = _tx.drv
	return tst
}

// String implements the fmt.Stringer.
func (tst *TypeScriptType) String() string {
	var builder strings.Builder
	builder.WriteString("TypeScriptType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tst.ID))
	builder.WriteString("project_id=")
	builder.WriteString(fmt.Sprintf("%v", tst.ProjectID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(tst.Name)
	builder.WriteString(", ")
	builder.WriteString("definition=")
	builder.WriteString(tst.Definition)
	builder.WriteByte(')')
	return builder.String()
}

// TypeScriptTypes is a parsable slice of TypeScriptType.
type TypeScriptTypes []*TypeScriptType
