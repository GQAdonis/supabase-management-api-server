// Code generated by ent, DO NOT EDIT.

package project

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the project type in the database.
	Label = "project"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeSecrets holds the string denoting the secrets edge name in mutations.
	EdgeSecrets = "secrets"
	// EdgeTypescriptTypes holds the string denoting the typescripttypes edge name in mutations.
	EdgeTypescriptTypes = "typescriptTypes"
	// EdgeFunctions holds the string denoting the functions edge name in mutations.
	EdgeFunctions = "functions"
	// EdgeCustomHostnames holds the string denoting the customhostnames edge name in mutations.
	EdgeCustomHostnames = "customHostnames"
	// EdgePgsodiumConfigs holds the string denoting the pgsodiumconfigs edge name in mutations.
	EdgePgsodiumConfigs = "pgsodiumConfigs"
	// EdgeNetworkBans holds the string denoting the networkbans edge name in mutations.
	EdgeNetworkBans = "networkBans"
	// EdgeBranches holds the string denoting the branches edge name in mutations.
	EdgeBranches = "branches"
	// EdgeChildBranches holds the string denoting the childbranches edge name in mutations.
	EdgeChildBranches = "childBranches"
	// EdgeAuthConfig holds the string denoting the auth_config edge name in mutations.
	EdgeAuthConfig = "auth_config"
	// Table holds the table name of the project in the database.
	Table = "projects"
	// SecretsTable is the table that holds the secrets relation/edge.
	SecretsTable = "secrets"
	// SecretsInverseTable is the table name for the Secret entity.
	// It exists in this package in order to avoid circular dependency with the "secret" package.
	SecretsInverseTable = "secrets"
	// SecretsColumn is the table column denoting the secrets relation/edge.
	SecretsColumn = "project_id"
	// TypescriptTypesTable is the table that holds the typescriptTypes relation/edge.
	TypescriptTypesTable = "type_script_types"
	// TypescriptTypesInverseTable is the table name for the TypeScriptType entity.
	// It exists in this package in order to avoid circular dependency with the "typescripttype" package.
	TypescriptTypesInverseTable = "type_script_types"
	// TypescriptTypesColumn is the table column denoting the typescriptTypes relation/edge.
	TypescriptTypesColumn = "project_id"
	// FunctionsTable is the table that holds the functions relation/edge.
	FunctionsTable = "functions"
	// FunctionsInverseTable is the table name for the Function entity.
	// It exists in this package in order to avoid circular dependency with the "function" package.
	FunctionsInverseTable = "functions"
	// FunctionsColumn is the table column denoting the functions relation/edge.
	FunctionsColumn = "project_id"
	// CustomHostnamesTable is the table that holds the customHostnames relation/edge.
	CustomHostnamesTable = "custom_hostnames"
	// CustomHostnamesInverseTable is the table name for the CustomHostname entity.
	// It exists in this package in order to avoid circular dependency with the "customhostname" package.
	CustomHostnamesInverseTable = "custom_hostnames"
	// CustomHostnamesColumn is the table column denoting the customHostnames relation/edge.
	CustomHostnamesColumn = "project_id"
	// PgsodiumConfigsTable is the table that holds the pgsodiumConfigs relation/edge.
	PgsodiumConfigsTable = "pgsodium_configs"
	// PgsodiumConfigsInverseTable is the table name for the PgsodiumConfig entity.
	// It exists in this package in order to avoid circular dependency with the "pgsodiumconfig" package.
	PgsodiumConfigsInverseTable = "pgsodium_configs"
	// PgsodiumConfigsColumn is the table column denoting the pgsodiumConfigs relation/edge.
	PgsodiumConfigsColumn = "project_id"
	// NetworkBansTable is the table that holds the networkBans relation/edge.
	NetworkBansTable = "network_bans"
	// NetworkBansInverseTable is the table name for the NetworkBan entity.
	// It exists in this package in order to avoid circular dependency with the "networkban" package.
	NetworkBansInverseTable = "network_bans"
	// NetworkBansColumn is the table column denoting the networkBans relation/edge.
	NetworkBansColumn = "project_id"
	// BranchesTable is the table that holds the branches relation/edge.
	BranchesTable = "branches"
	// BranchesInverseTable is the table name for the Branch entity.
	// It exists in this package in order to avoid circular dependency with the "branch" package.
	BranchesInverseTable = "branches"
	// BranchesColumn is the table column denoting the branches relation/edge.
	BranchesColumn = "project_ref"
	// ChildBranchesTable is the table that holds the childBranches relation/edge.
	ChildBranchesTable = "branches"
	// ChildBranchesInverseTable is the table name for the Branch entity.
	// It exists in this package in order to avoid circular dependency with the "branch" package.
	ChildBranchesInverseTable = "branches"
	// ChildBranchesColumn is the table column denoting the childBranches relation/edge.
	ChildBranchesColumn = "parent_project_ref"
	// AuthConfigTable is the table that holds the auth_config relation/edge.
	AuthConfigTable = "auth_configs"
	// AuthConfigInverseTable is the table name for the AuthConfig entity.
	// It exists in this package in order to avoid circular dependency with the "authconfig" package.
	AuthConfigInverseTable = "auth_configs"
	// AuthConfigColumn is the table column denoting the auth_config relation/edge.
	AuthConfigColumn = "project_auth_config"
)

// Columns holds all SQL columns for project fields.
var Columns = []string{
	FieldID,
	FieldName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Project queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySecretsCount orders the results by secrets count.
func BySecretsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSecretsStep(), opts...)
	}
}

// BySecrets orders the results by secrets terms.
func BySecrets(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSecretsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTypescriptTypesCount orders the results by typescriptTypes count.
func ByTypescriptTypesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTypescriptTypesStep(), opts...)
	}
}

// ByTypescriptTypes orders the results by typescriptTypes terms.
func ByTypescriptTypes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTypescriptTypesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFunctionsCount orders the results by functions count.
func ByFunctionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFunctionsStep(), opts...)
	}
}

// ByFunctions orders the results by functions terms.
func ByFunctions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFunctionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCustomHostnamesCount orders the results by customHostnames count.
func ByCustomHostnamesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCustomHostnamesStep(), opts...)
	}
}

// ByCustomHostnames orders the results by customHostnames terms.
func ByCustomHostnames(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomHostnamesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPgsodiumConfigsCount orders the results by pgsodiumConfigs count.
func ByPgsodiumConfigsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPgsodiumConfigsStep(), opts...)
	}
}

// ByPgsodiumConfigs orders the results by pgsodiumConfigs terms.
func ByPgsodiumConfigs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPgsodiumConfigsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNetworkBansCount orders the results by networkBans count.
func ByNetworkBansCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNetworkBansStep(), opts...)
	}
}

// ByNetworkBans orders the results by networkBans terms.
func ByNetworkBans(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNetworkBansStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBranchesCount orders the results by branches count.
func ByBranchesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBranchesStep(), opts...)
	}
}

// ByBranches orders the results by branches terms.
func ByBranches(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBranchesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByChildBranchesCount orders the results by childBranches count.
func ByChildBranchesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChildBranchesStep(), opts...)
	}
}

// ByChildBranches orders the results by childBranches terms.
func ByChildBranches(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildBranchesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAuthConfigField orders the results by auth_config field.
func ByAuthConfigField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthConfigStep(), sql.OrderByField(field, opts...))
	}
}
func newSecretsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SecretsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SecretsTable, SecretsColumn),
	)
}
func newTypescriptTypesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TypescriptTypesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TypescriptTypesTable, TypescriptTypesColumn),
	)
}
func newFunctionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FunctionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FunctionsTable, FunctionsColumn),
	)
}
func newCustomHostnamesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomHostnamesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CustomHostnamesTable, CustomHostnamesColumn),
	)
}
func newPgsodiumConfigsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PgsodiumConfigsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PgsodiumConfigsTable, PgsodiumConfigsColumn),
	)
}
func newNetworkBansStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NetworkBansInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NetworkBansTable, NetworkBansColumn),
	)
}
func newBranchesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BranchesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BranchesTable, BranchesColumn),
	)
}
func newChildBranchesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChildBranchesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChildBranchesTable, ChildBranchesColumn),
	)
}
func newAuthConfigStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthConfigInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, AuthConfigTable, AuthConfigColumn),
	)
}
