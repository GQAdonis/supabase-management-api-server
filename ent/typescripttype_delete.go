// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"tribemedia.io/m/ent/predicate"
	"tribemedia.io/m/ent/typescripttype"
)

// TypeScriptTypeDelete is the builder for deleting a TypeScriptType entity.
type TypeScriptTypeDelete struct {
	config
	hooks    []Hook
	mutation *TypeScriptTypeMutation
}

// Where appends a list predicates to the TypeScriptTypeDelete builder.
func (tstd *TypeScriptTypeDelete) Where(ps ...predicate.TypeScriptType) *TypeScriptTypeDelete {
	tstd.mutation.Where(ps...)
	return tstd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tstd *TypeScriptTypeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tstd.sqlExec, tstd.mutation, tstd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tstd *TypeScriptTypeDelete) ExecX(ctx context.Context) int {
	n, err := tstd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tstd *TypeScriptTypeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(typescripttype.Table, sqlgraph.NewFieldSpec(typescripttype.FieldID, field.TypeUUID))
	if ps := tstd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tstd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tstd.mutation.done = true
	return affected, err
}

// TypeScriptTypeDeleteOne is the builder for deleting a single TypeScriptType entity.
type TypeScriptTypeDeleteOne struct {
	tstd *TypeScriptTypeDelete
}

// Where appends a list predicates to the TypeScriptTypeDelete builder.
func (tstdo *TypeScriptTypeDeleteOne) Where(ps ...predicate.TypeScriptType) *TypeScriptTypeDeleteOne {
	tstdo.tstd.mutation.Where(ps...)
	return tstdo
}

// Exec executes the deletion query.
func (tstdo *TypeScriptTypeDeleteOne) Exec(ctx context.Context) error {
	n, err := tstdo.tstd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{typescripttype.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tstdo *TypeScriptTypeDeleteOne) ExecX(ctx context.Context) {
	if err := tstdo.Exec(ctx); err != nil {
		panic(err)
	}
}
