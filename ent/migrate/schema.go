// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AuthConfigsColumns holds the columns for the "auth_configs" table.
	AuthConfigsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "disable_signup", Type: field.TypeBool},
		{Name: "external_email_enabled", Type: field.TypeBool},
		{Name: "project_auth_config", Type: field.TypeUUID, Unique: true},
	}
	// AuthConfigsTable holds the schema information for the "auth_configs" table.
	AuthConfigsTable = &schema.Table{
		Name:       "auth_configs",
		Columns:    AuthConfigsColumns,
		PrimaryKey: []*schema.Column{AuthConfigsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "auth_configs_projects_auth_config",
				Columns:    []*schema.Column{AuthConfigsColumns[3]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// BranchesColumns holds the columns for the "branches" table.
	BranchesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "project_ref", Type: field.TypeUUID, Nullable: true},
		{Name: "parent_project_ref", Type: field.TypeUUID, Nullable: true},
	}
	// BranchesTable holds the schema information for the "branches" table.
	BranchesTable = &schema.Table{
		Name:       "branches",
		Columns:    BranchesColumns,
		PrimaryKey: []*schema.Column{BranchesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "branches_projects_branches",
				Columns:    []*schema.Column{BranchesColumns[2]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "branches_projects_childBranches",
				Columns:    []*schema.Column{BranchesColumns[3]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CustomHostnamesColumns holds the columns for the "custom_hostnames" table.
	CustomHostnamesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "hostname", Type: field.TypeString},
		{Name: "ssl_status", Type: field.TypeString},
		{Name: "project_id", Type: field.TypeUUID},
	}
	// CustomHostnamesTable holds the schema information for the "custom_hostnames" table.
	CustomHostnamesTable = &schema.Table{
		Name:       "custom_hostnames",
		Columns:    CustomHostnamesColumns,
		PrimaryKey: []*schema.Column{CustomHostnamesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "custom_hostnames_projects_customHostnames",
				Columns:    []*schema.Column{CustomHostnamesColumns[3]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// FunctionsColumns holds the columns for the "functions" table.
	FunctionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "runtime", Type: field.TypeString},
		{Name: "source_code", Type: field.TypeString, Size: 2147483647},
		{Name: "project_id", Type: field.TypeUUID},
	}
	// FunctionsTable holds the schema information for the "functions" table.
	FunctionsTable = &schema.Table{
		Name:       "functions",
		Columns:    FunctionsColumns,
		PrimaryKey: []*schema.Column{FunctionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "functions_projects_functions",
				Columns:    []*schema.Column{FunctionsColumns[4]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// NetworkBansColumns holds the columns for the "network_bans" table.
	NetworkBansColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "ip_address", Type: field.TypeString},
		{Name: "reason", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "project_id", Type: field.TypeUUID},
	}
	// NetworkBansTable holds the schema information for the "network_bans" table.
	NetworkBansTable = &schema.Table{
		Name:       "network_bans",
		Columns:    NetworkBansColumns,
		PrimaryKey: []*schema.Column{NetworkBansColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "network_bans_projects_networkBans",
				Columns:    []*schema.Column{NetworkBansColumns[4]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// OrganizationsColumns holds the columns for the "organizations" table.
	OrganizationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// OrganizationsTable holds the schema information for the "organizations" table.
	OrganizationsTable = &schema.Table{
		Name:       "organizations",
		Columns:    OrganizationsColumns,
		PrimaryKey: []*schema.Column{OrganizationsColumns[0]},
	}
	// PgsodiumConfigsColumns holds the columns for the "pgsodium_configs" table.
	PgsodiumConfigsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "enabled", Type: field.TypeBool, Default: false},
		{Name: "project_id", Type: field.TypeUUID},
	}
	// PgsodiumConfigsTable holds the schema information for the "pgsodium_configs" table.
	PgsodiumConfigsTable = &schema.Table{
		Name:       "pgsodium_configs",
		Columns:    PgsodiumConfigsColumns,
		PrimaryKey: []*schema.Column{PgsodiumConfigsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "pgsodium_configs_projects_pgsodiumConfigs",
				Columns:    []*schema.Column{PgsodiumConfigsColumns[2]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ProjectsColumns holds the columns for the "projects" table.
	ProjectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
	}
	// ProjectsTable holds the schema information for the "projects" table.
	ProjectsTable = &schema.Table{
		Name:       "projects",
		Columns:    ProjectsColumns,
		PrimaryKey: []*schema.Column{ProjectsColumns[0]},
	}
	// ProvidersColumns holds the columns for the "providers" table.
	ProvidersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "type", Type: field.TypeString},
		{Name: "metadata_xml", Type: field.TypeString, Nullable: true},
		{Name: "metadata_url", Type: field.TypeString, Nullable: true},
		{Name: "domains", Type: field.TypeJSON},
		{Name: "attribute_mapping", Type: field.TypeJSON, Nullable: true},
		{Name: "organization_providers", Type: field.TypeInt, Nullable: true},
	}
	// ProvidersTable holds the schema information for the "providers" table.
	ProvidersTable = &schema.Table{
		Name:       "providers",
		Columns:    ProvidersColumns,
		PrimaryKey: []*schema.Column{ProvidersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "providers_organizations_providers",
				Columns:    []*schema.Column{ProvidersColumns[6]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SecretsColumns holds the columns for the "secrets" table.
	SecretsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "value", Type: field.TypeString},
		{Name: "project_id", Type: field.TypeUUID},
	}
	// SecretsTable holds the schema information for the "secrets" table.
	SecretsTable = &schema.Table{
		Name:       "secrets",
		Columns:    SecretsColumns,
		PrimaryKey: []*schema.Column{SecretsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "secrets_projects_secrets",
				Columns:    []*schema.Column{SecretsColumns[3]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ThirdPartyAuthsColumns holds the columns for the "third_party_auths" table.
	ThirdPartyAuthsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "oidc_issuer_url", Type: field.TypeString, Nullable: true},
		{Name: "jwks_url", Type: field.TypeString, Nullable: true},
		{Name: "custom_jwks", Type: field.TypeJSON, Nullable: true},
		{Name: "organization_third_party_auths", Type: field.TypeInt, Nullable: true},
	}
	// ThirdPartyAuthsTable holds the schema information for the "third_party_auths" table.
	ThirdPartyAuthsTable = &schema.Table{
		Name:       "third_party_auths",
		Columns:    ThirdPartyAuthsColumns,
		PrimaryKey: []*schema.Column{ThirdPartyAuthsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "third_party_auths_organizations_third_party_auths",
				Columns:    []*schema.Column{ThirdPartyAuthsColumns[4]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TypeScriptTypesColumns holds the columns for the "type_script_types" table.
	TypeScriptTypesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "definition", Type: field.TypeString, Size: 2147483647},
		{Name: "project_id", Type: field.TypeUUID},
	}
	// TypeScriptTypesTable holds the schema information for the "type_script_types" table.
	TypeScriptTypesTable = &schema.Table{
		Name:       "type_script_types",
		Columns:    TypeScriptTypesColumns,
		PrimaryKey: []*schema.Column{TypeScriptTypesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "type_script_types_projects_typescriptTypes",
				Columns:    []*schema.Column{TypeScriptTypesColumns[3]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AuthConfigsTable,
		BranchesTable,
		CustomHostnamesTable,
		FunctionsTable,
		NetworkBansTable,
		OrganizationsTable,
		PgsodiumConfigsTable,
		ProjectsTable,
		ProvidersTable,
		SecretsTable,
		ThirdPartyAuthsTable,
		TypeScriptTypesTable,
		UsersTable,
	}
)

func init() {
	AuthConfigsTable.ForeignKeys[0].RefTable = ProjectsTable
	BranchesTable.ForeignKeys[0].RefTable = ProjectsTable
	BranchesTable.ForeignKeys[1].RefTable = ProjectsTable
	CustomHostnamesTable.ForeignKeys[0].RefTable = ProjectsTable
	FunctionsTable.ForeignKeys[0].RefTable = ProjectsTable
	NetworkBansTable.ForeignKeys[0].RefTable = ProjectsTable
	PgsodiumConfigsTable.ForeignKeys[0].RefTable = ProjectsTable
	ProvidersTable.ForeignKeys[0].RefTable = OrganizationsTable
	SecretsTable.ForeignKeys[0].RefTable = ProjectsTable
	ThirdPartyAuthsTable.ForeignKeys[0].RefTable = OrganizationsTable
	TypeScriptTypesTable.ForeignKeys[0].RefTable = ProjectsTable
}
