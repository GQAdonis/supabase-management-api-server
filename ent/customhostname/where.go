// Code generated by ent, DO NOT EDIT.

package customhostname

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"tribemedia.io/m/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldLTE(FieldID, id))
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v uuid.UUID) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldEQ(FieldProjectID, v))
}

// Hostname applies equality check predicate on the "hostname" field. It's identical to HostnameEQ.
func Hostname(v string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldEQ(FieldHostname, v))
}

// SslStatus applies equality check predicate on the "ssl_status" field. It's identical to SslStatusEQ.
func SslStatus(v string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldEQ(FieldSslStatus, v))
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v uuid.UUID) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldEQ(FieldProjectID, v))
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v uuid.UUID) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldNEQ(FieldProjectID, v))
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...uuid.UUID) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldIn(FieldProjectID, vs...))
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...uuid.UUID) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldNotIn(FieldProjectID, vs...))
}

// HostnameEQ applies the EQ predicate on the "hostname" field.
func HostnameEQ(v string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldEQ(FieldHostname, v))
}

// HostnameNEQ applies the NEQ predicate on the "hostname" field.
func HostnameNEQ(v string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldNEQ(FieldHostname, v))
}

// HostnameIn applies the In predicate on the "hostname" field.
func HostnameIn(vs ...string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldIn(FieldHostname, vs...))
}

// HostnameNotIn applies the NotIn predicate on the "hostname" field.
func HostnameNotIn(vs ...string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldNotIn(FieldHostname, vs...))
}

// HostnameGT applies the GT predicate on the "hostname" field.
func HostnameGT(v string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldGT(FieldHostname, v))
}

// HostnameGTE applies the GTE predicate on the "hostname" field.
func HostnameGTE(v string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldGTE(FieldHostname, v))
}

// HostnameLT applies the LT predicate on the "hostname" field.
func HostnameLT(v string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldLT(FieldHostname, v))
}

// HostnameLTE applies the LTE predicate on the "hostname" field.
func HostnameLTE(v string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldLTE(FieldHostname, v))
}

// HostnameContains applies the Contains predicate on the "hostname" field.
func HostnameContains(v string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldContains(FieldHostname, v))
}

// HostnameHasPrefix applies the HasPrefix predicate on the "hostname" field.
func HostnameHasPrefix(v string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldHasPrefix(FieldHostname, v))
}

// HostnameHasSuffix applies the HasSuffix predicate on the "hostname" field.
func HostnameHasSuffix(v string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldHasSuffix(FieldHostname, v))
}

// HostnameEqualFold applies the EqualFold predicate on the "hostname" field.
func HostnameEqualFold(v string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldEqualFold(FieldHostname, v))
}

// HostnameContainsFold applies the ContainsFold predicate on the "hostname" field.
func HostnameContainsFold(v string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldContainsFold(FieldHostname, v))
}

// SslStatusEQ applies the EQ predicate on the "ssl_status" field.
func SslStatusEQ(v string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldEQ(FieldSslStatus, v))
}

// SslStatusNEQ applies the NEQ predicate on the "ssl_status" field.
func SslStatusNEQ(v string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldNEQ(FieldSslStatus, v))
}

// SslStatusIn applies the In predicate on the "ssl_status" field.
func SslStatusIn(vs ...string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldIn(FieldSslStatus, vs...))
}

// SslStatusNotIn applies the NotIn predicate on the "ssl_status" field.
func SslStatusNotIn(vs ...string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldNotIn(FieldSslStatus, vs...))
}

// SslStatusGT applies the GT predicate on the "ssl_status" field.
func SslStatusGT(v string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldGT(FieldSslStatus, v))
}

// SslStatusGTE applies the GTE predicate on the "ssl_status" field.
func SslStatusGTE(v string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldGTE(FieldSslStatus, v))
}

// SslStatusLT applies the LT predicate on the "ssl_status" field.
func SslStatusLT(v string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldLT(FieldSslStatus, v))
}

// SslStatusLTE applies the LTE predicate on the "ssl_status" field.
func SslStatusLTE(v string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldLTE(FieldSslStatus, v))
}

// SslStatusContains applies the Contains predicate on the "ssl_status" field.
func SslStatusContains(v string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldContains(FieldSslStatus, v))
}

// SslStatusHasPrefix applies the HasPrefix predicate on the "ssl_status" field.
func SslStatusHasPrefix(v string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldHasPrefix(FieldSslStatus, v))
}

// SslStatusHasSuffix applies the HasSuffix predicate on the "ssl_status" field.
func SslStatusHasSuffix(v string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldHasSuffix(FieldSslStatus, v))
}

// SslStatusEqualFold applies the EqualFold predicate on the "ssl_status" field.
func SslStatusEqualFold(v string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldEqualFold(FieldSslStatus, v))
}

// SslStatusContainsFold applies the ContainsFold predicate on the "ssl_status" field.
func SslStatusContainsFold(v string) predicate.CustomHostname {
	return predicate.CustomHostname(sql.FieldContainsFold(FieldSslStatus, v))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.CustomHostname {
	return predicate.CustomHostname(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.CustomHostname {
	return predicate.CustomHostname(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CustomHostname) predicate.CustomHostname {
	return predicate.CustomHostname(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CustomHostname) predicate.CustomHostname {
	return predicate.CustomHostname(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CustomHostname) predicate.CustomHostname {
	return predicate.CustomHostname(sql.NotPredicates(p))
}
