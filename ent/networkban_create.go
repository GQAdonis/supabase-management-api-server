// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"tribemedia.io/m/ent/networkban"
	"tribemedia.io/m/ent/project"
)

// NetworkBanCreate is the builder for creating a NetworkBan entity.
type NetworkBanCreate struct {
	config
	mutation *NetworkBanMutation
	hooks    []Hook
}

// SetProjectID sets the "project_id" field.
func (nbc *NetworkBanCreate) SetProjectID(u uuid.UUID) *NetworkBanCreate {
	nbc.mutation.SetProjectID(u)
	return nbc
}

// SetIPAddress sets the "ip_address" field.
func (nbc *NetworkBanCreate) SetIPAddress(s string) *NetworkBanCreate {
	nbc.mutation.SetIPAddress(s)
	return nbc
}

// SetReason sets the "reason" field.
func (nbc *NetworkBanCreate) SetReason(s string) *NetworkBanCreate {
	nbc.mutation.SetReason(s)
	return nbc
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (nbc *NetworkBanCreate) SetNillableReason(s *string) *NetworkBanCreate {
	if s != nil {
		nbc.SetReason(*s)
	}
	return nbc
}

// SetCreatedAt sets the "created_at" field.
func (nbc *NetworkBanCreate) SetCreatedAt(t time.Time) *NetworkBanCreate {
	nbc.mutation.SetCreatedAt(t)
	return nbc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nbc *NetworkBanCreate) SetNillableCreatedAt(t *time.Time) *NetworkBanCreate {
	if t != nil {
		nbc.SetCreatedAt(*t)
	}
	return nbc
}

// SetID sets the "id" field.
func (nbc *NetworkBanCreate) SetID(u uuid.UUID) *NetworkBanCreate {
	nbc.mutation.SetID(u)
	return nbc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (nbc *NetworkBanCreate) SetNillableID(u *uuid.UUID) *NetworkBanCreate {
	if u != nil {
		nbc.SetID(*u)
	}
	return nbc
}

// SetProject sets the "project" edge to the Project entity.
func (nbc *NetworkBanCreate) SetProject(p *Project) *NetworkBanCreate {
	return nbc.SetProjectID(p.ID)
}

// Mutation returns the NetworkBanMutation object of the builder.
func (nbc *NetworkBanCreate) Mutation() *NetworkBanMutation {
	return nbc.mutation
}

// Save creates the NetworkBan in the database.
func (nbc *NetworkBanCreate) Save(ctx context.Context) (*NetworkBan, error) {
	nbc.defaults()
	return withHooks(ctx, nbc.sqlSave, nbc.mutation, nbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nbc *NetworkBanCreate) SaveX(ctx context.Context) *NetworkBan {
	v, err := nbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nbc *NetworkBanCreate) Exec(ctx context.Context) error {
	_, err := nbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nbc *NetworkBanCreate) ExecX(ctx context.Context) {
	if err := nbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nbc *NetworkBanCreate) defaults() {
	if _, ok := nbc.mutation.CreatedAt(); !ok {
		v := networkban.DefaultCreatedAt()
		nbc.mutation.SetCreatedAt(v)
	}
	if _, ok := nbc.mutation.ID(); !ok {
		v := networkban.DefaultID()
		nbc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nbc *NetworkBanCreate) check() error {
	if _, ok := nbc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`ent: missing required field "NetworkBan.project_id"`)}
	}
	if _, ok := nbc.mutation.IPAddress(); !ok {
		return &ValidationError{Name: "ip_address", err: errors.New(`ent: missing required field "NetworkBan.ip_address"`)}
	}
	if _, ok := nbc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "NetworkBan.created_at"`)}
	}
	if _, ok := nbc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "NetworkBan.project"`)}
	}
	return nil
}

func (nbc *NetworkBanCreate) sqlSave(ctx context.Context) (*NetworkBan, error) {
	if err := nbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	nbc.mutation.id = &_node.ID
	nbc.mutation.done = true
	return _node, nil
}

func (nbc *NetworkBanCreate) createSpec() (*NetworkBan, *sqlgraph.CreateSpec) {
	var (
		_node = &NetworkBan{config: nbc.config}
		_spec = sqlgraph.NewCreateSpec(networkban.Table, sqlgraph.NewFieldSpec(networkban.FieldID, field.TypeUUID))
	)
	if id, ok := nbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := nbc.mutation.IPAddress(); ok {
		_spec.SetField(networkban.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := nbc.mutation.Reason(); ok {
		_spec.SetField(networkban.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if value, ok := nbc.mutation.CreatedAt(); ok {
		_spec.SetField(networkban.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := nbc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   networkban.ProjectTable,
			Columns: []string{networkban.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NetworkBanCreateBulk is the builder for creating many NetworkBan entities in bulk.
type NetworkBanCreateBulk struct {
	config
	err      error
	builders []*NetworkBanCreate
}

// Save creates the NetworkBan entities in the database.
func (nbcb *NetworkBanCreateBulk) Save(ctx context.Context) ([]*NetworkBan, error) {
	if nbcb.err != nil {
		return nil, nbcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(nbcb.builders))
	nodes := make([]*NetworkBan, len(nbcb.builders))
	mutators := make([]Mutator, len(nbcb.builders))
	for i := range nbcb.builders {
		func(i int, root context.Context) {
			builder := nbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NetworkBanMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nbcb *NetworkBanCreateBulk) SaveX(ctx context.Context) []*NetworkBan {
	v, err := nbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nbcb *NetworkBanCreateBulk) Exec(ctx context.Context) error {
	_, err := nbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nbcb *NetworkBanCreateBulk) ExecX(ctx context.Context) {
	if err := nbcb.Exec(ctx); err != nil {
		panic(err)
	}
}
