// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"tribemedia.io/m/ent/authconfig"
	"tribemedia.io/m/ent/project"
)

// AuthConfig is the model entity for the AuthConfig schema.
type AuthConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DisableSignup holds the value of the "disable_signup" field.
	DisableSignup bool `json:"disable_signup,omitempty"`
	// ExternalEmailEnabled holds the value of the "external_email_enabled" field.
	ExternalEmailEnabled bool `json:"external_email_enabled,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AuthConfigQuery when eager-loading is set.
	Edges               AuthConfigEdges `json:"edges"`
	project_auth_config *uuid.UUID
	selectValues        sql.SelectValues
}

// AuthConfigEdges holds the relations/edges for other nodes in the graph.
type AuthConfigEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AuthConfigEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authconfig.FieldDisableSignup, authconfig.FieldExternalEmailEnabled:
			values[i] = new(sql.NullBool)
		case authconfig.FieldID:
			values[i] = new(uuid.UUID)
		case authconfig.ForeignKeys[0]: // project_auth_config
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthConfig fields.
func (ac *AuthConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authconfig.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ac.ID = *value
			}
		case authconfig.FieldDisableSignup:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field disable_signup", values[i])
			} else if value.Valid {
				ac.DisableSignup = value.Bool
			}
		case authconfig.FieldExternalEmailEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field external_email_enabled", values[i])
			} else if value.Valid {
				ac.ExternalEmailEnabled = value.Bool
			}
		case authconfig.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field project_auth_config", values[i])
			} else if value.Valid {
				ac.project_auth_config = new(uuid.UUID)
				*ac.project_auth_config = *value.S.(*uuid.UUID)
			}
		default:
			ac.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AuthConfig.
// This includes values selected through modifiers, order, etc.
func (ac *AuthConfig) Value(name string) (ent.Value, error) {
	return ac.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the AuthConfig entity.
func (ac *AuthConfig) QueryProject() *ProjectQuery {
	return NewAuthConfigClient(ac.config).QueryProject(ac)
}

// Update returns a builder for updating this AuthConfig.
// Note that you need to call AuthConfig.Unwrap() before calling this method if this AuthConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (ac *AuthConfig) Update() *AuthConfigUpdateOne {
	return NewAuthConfigClient(ac.config).UpdateOne(ac)
}

// Unwrap unwraps the AuthConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ac *AuthConfig) Unwrap() *AuthConfig {
	_tx, ok := ac.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuthConfig is not a transactional entity")
	}
	ac.config.driver = _tx.drv
	return ac
}

// String implements the fmt.Stringer.
func (ac *AuthConfig) String() string {
	var builder strings.Builder
	builder.WriteString("AuthConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ac.ID))
	builder.WriteString("disable_signup=")
	builder.WriteString(fmt.Sprintf("%v", ac.DisableSignup))
	builder.WriteString(", ")
	builder.WriteString("external_email_enabled=")
	builder.WriteString(fmt.Sprintf("%v", ac.ExternalEmailEnabled))
	builder.WriteByte(')')
	return builder.String()
}

// AuthConfigs is a parsable slice of AuthConfig.
type AuthConfigs []*AuthConfig
