// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"tribemedia.io/m/ent/function"
	"tribemedia.io/m/ent/predicate"
	"tribemedia.io/m/ent/project"
)

// FunctionUpdate is the builder for updating Function entities.
type FunctionUpdate struct {
	config
	hooks    []Hook
	mutation *FunctionMutation
}

// Where appends a list predicates to the FunctionUpdate builder.
func (fu *FunctionUpdate) Where(ps ...predicate.Function) *FunctionUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetProjectID sets the "project_id" field.
func (fu *FunctionUpdate) SetProjectID(u uuid.UUID) *FunctionUpdate {
	fu.mutation.SetProjectID(u)
	return fu
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (fu *FunctionUpdate) SetNillableProjectID(u *uuid.UUID) *FunctionUpdate {
	if u != nil {
		fu.SetProjectID(*u)
	}
	return fu
}

// SetName sets the "name" field.
func (fu *FunctionUpdate) SetName(s string) *FunctionUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fu *FunctionUpdate) SetNillableName(s *string) *FunctionUpdate {
	if s != nil {
		fu.SetName(*s)
	}
	return fu
}

// SetRuntime sets the "runtime" field.
func (fu *FunctionUpdate) SetRuntime(s string) *FunctionUpdate {
	fu.mutation.SetRuntime(s)
	return fu
}

// SetNillableRuntime sets the "runtime" field if the given value is not nil.
func (fu *FunctionUpdate) SetNillableRuntime(s *string) *FunctionUpdate {
	if s != nil {
		fu.SetRuntime(*s)
	}
	return fu
}

// SetSourceCode sets the "source_code" field.
func (fu *FunctionUpdate) SetSourceCode(s string) *FunctionUpdate {
	fu.mutation.SetSourceCode(s)
	return fu
}

// SetNillableSourceCode sets the "source_code" field if the given value is not nil.
func (fu *FunctionUpdate) SetNillableSourceCode(s *string) *FunctionUpdate {
	if s != nil {
		fu.SetSourceCode(*s)
	}
	return fu
}

// SetProject sets the "project" edge to the Project entity.
func (fu *FunctionUpdate) SetProject(p *Project) *FunctionUpdate {
	return fu.SetProjectID(p.ID)
}

// Mutation returns the FunctionMutation object of the builder.
func (fu *FunctionUpdate) Mutation() *FunctionMutation {
	return fu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (fu *FunctionUpdate) ClearProject() *FunctionUpdate {
	fu.mutation.ClearProject()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FunctionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FunctionUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FunctionUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FunctionUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FunctionUpdate) check() error {
	if _, ok := fu.mutation.ProjectID(); fu.mutation.ProjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Function.project"`)
	}
	return nil
}

func (fu *FunctionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(function.Table, function.Columns, sqlgraph.NewFieldSpec(function.FieldID, field.TypeUUID))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.SetField(function.FieldName, field.TypeString, value)
	}
	if value, ok := fu.mutation.Runtime(); ok {
		_spec.SetField(function.FieldRuntime, field.TypeString, value)
	}
	if value, ok := fu.mutation.SourceCode(); ok {
		_spec.SetField(function.FieldSourceCode, field.TypeString, value)
	}
	if fu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   function.ProjectTable,
			Columns: []string{function.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   function.ProjectTable,
			Columns: []string{function.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{function.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FunctionUpdateOne is the builder for updating a single Function entity.
type FunctionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FunctionMutation
}

// SetProjectID sets the "project_id" field.
func (fuo *FunctionUpdateOne) SetProjectID(u uuid.UUID) *FunctionUpdateOne {
	fuo.mutation.SetProjectID(u)
	return fuo
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (fuo *FunctionUpdateOne) SetNillableProjectID(u *uuid.UUID) *FunctionUpdateOne {
	if u != nil {
		fuo.SetProjectID(*u)
	}
	return fuo
}

// SetName sets the "name" field.
func (fuo *FunctionUpdateOne) SetName(s string) *FunctionUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fuo *FunctionUpdateOne) SetNillableName(s *string) *FunctionUpdateOne {
	if s != nil {
		fuo.SetName(*s)
	}
	return fuo
}

// SetRuntime sets the "runtime" field.
func (fuo *FunctionUpdateOne) SetRuntime(s string) *FunctionUpdateOne {
	fuo.mutation.SetRuntime(s)
	return fuo
}

// SetNillableRuntime sets the "runtime" field if the given value is not nil.
func (fuo *FunctionUpdateOne) SetNillableRuntime(s *string) *FunctionUpdateOne {
	if s != nil {
		fuo.SetRuntime(*s)
	}
	return fuo
}

// SetSourceCode sets the "source_code" field.
func (fuo *FunctionUpdateOne) SetSourceCode(s string) *FunctionUpdateOne {
	fuo.mutation.SetSourceCode(s)
	return fuo
}

// SetNillableSourceCode sets the "source_code" field if the given value is not nil.
func (fuo *FunctionUpdateOne) SetNillableSourceCode(s *string) *FunctionUpdateOne {
	if s != nil {
		fuo.SetSourceCode(*s)
	}
	return fuo
}

// SetProject sets the "project" edge to the Project entity.
func (fuo *FunctionUpdateOne) SetProject(p *Project) *FunctionUpdateOne {
	return fuo.SetProjectID(p.ID)
}

// Mutation returns the FunctionMutation object of the builder.
func (fuo *FunctionUpdateOne) Mutation() *FunctionMutation {
	return fuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (fuo *FunctionUpdateOne) ClearProject() *FunctionUpdateOne {
	fuo.mutation.ClearProject()
	return fuo
}

// Where appends a list predicates to the FunctionUpdate builder.
func (fuo *FunctionUpdateOne) Where(ps ...predicate.Function) *FunctionUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FunctionUpdateOne) Select(field string, fields ...string) *FunctionUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Function entity.
func (fuo *FunctionUpdateOne) Save(ctx context.Context) (*Function, error) {
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FunctionUpdateOne) SaveX(ctx context.Context) *Function {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FunctionUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FunctionUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FunctionUpdateOne) check() error {
	if _, ok := fuo.mutation.ProjectID(); fuo.mutation.ProjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Function.project"`)
	}
	return nil
}

func (fuo *FunctionUpdateOne) sqlSave(ctx context.Context) (_node *Function, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(function.Table, function.Columns, sqlgraph.NewFieldSpec(function.FieldID, field.TypeUUID))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Function.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, function.FieldID)
		for _, f := range fields {
			if !function.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != function.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.SetField(function.FieldName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Runtime(); ok {
		_spec.SetField(function.FieldRuntime, field.TypeString, value)
	}
	if value, ok := fuo.mutation.SourceCode(); ok {
		_spec.SetField(function.FieldSourceCode, field.TypeString, value)
	}
	if fuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   function.ProjectTable,
			Columns: []string{function.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   function.ProjectTable,
			Columns: []string{function.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Function{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{function.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
